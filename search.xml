<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>6.824实验记录</title>
      <link href="/2024/08/18/6-824%E5%AE%9E%E9%AA%8C%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/08/18/6-824%E5%AE%9E%E9%AA%8C%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> lab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MIT 6.824 </tag>
            
            <tag> 分布式系统 </tag>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2024/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2024/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 八股 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2024/08/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/08/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 八股 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进程与线程 </tag>
            
            <tag> 同步与通信 </tag>
            
            <tag> 内存管理 </tag>
            
            <tag> 死锁 </tag>
            
            <tag> IO管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<ul><li>传输层：TCP和UDP<ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%EF%BC%9F">什么是三次握手</a></li><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%EF%BC%9F">什么是四次挥手</a></li></ul></li></ul><span id="more"></span><h3 id="什么是三次握手？"><a href="#什么是三次握手？" class="headerlink" title="什么是三次握手？"></a>什么是三次握手？</h3><p><img src="/%22D:%5CBlog%5Cthemes%5Cnext%5Csource%5Cimages%5Cgraph%5C74163b7a9166e11e16b35090e2f32a1a.jpg%22"></p><ul><li>第一次握手：<strong>客户端行为</strong> ：客户端将 SYN 置 1，随机产生一个初始序列号 seq 发送给服务器，进入 SYN_SENT 状态；</li><li>第二次握手：<strong>服务器行为</strong> ：服务器收到客户端的 SYN &#x3D; 1 后，知道客户端请求建立连接，将自己的 SYN 置 1，ACK 置 1，产生一个acknowledge number &#x3D; sequence number + 1，并随机产生一个自己的初始序列号，发送给客户端，进入 SYN_RCVD 状态；</li><li>第三次握手：<strong>客户端的确认</strong> ：客户端检查 acknowledge number 是否为序列号 + 1，ACK 是否为 1，检查正确后将自己的 ACK 置 1，产生一个acknowledge number &#x3D; 服务器发送的序列号 + 1，发送给服务器，进 ESTABLISHED 状态；<strong>服务器的确认</strong> ：服务器检查 acknowledge number 是否为序列号 + 1 和 ACK 是否为1后进入 ESTABLISHED 状态，完成三次握手，连接建立。</li></ul><h5 id="TCP建立连接可以两次握手吗？为什么"><a href="#TCP建立连接可以两次握手吗？为什么" class="headerlink" title="TCP建立连接可以两次握手吗？为什么?"></a>TCP建立连接可以两次握手吗？为什么?</h5><p>不可以。</p><ol><li>可能会出现<strong>已失效的请求报文又传送到服务器端</strong> 。<blockquote><p>客户端发出的第一个请求报文并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达服务器端。本来这是一个早已失效的报文段，但服务器端收到此失效的连接请求报文段后，误以为是客户端再次发送的一个新的连接请求，于是就向客户端发出确认报文段，同意建立连接。<strong>假设不采用”三次握手“，那么只要服务器端发出确认，新的连接就建立了。</strong> 由于客户端没有发出建立连接的请求，因此不会理睬服务器端的确认，也不会向服务器发送数据，但服务器端却以为新的连接已建立，并一直等待客户端发来数据，导致浪费很多服务器资源。</p></blockquote></li><li>只进行两次握手，服务器无法确认客户端是否接收到第二次握手的报文。如果 SYN-ACK 报文在传输过程中丢失，而客户端又不会发送数据，服务器认为连接已建立并开始发送数据，从而导致数据丢失于服务器资源浪费。</li><li>还有就是两次握手会给 SYN flood 攻击提供机会。</li></ol><h5 id="可以采用四次握手吗？为什么？"><a href="#可以采用四次握手吗？为什么？" class="headerlink" title="可以采用四次握手吗？为什么？"></a>可以采用四次握手吗？为什么？</h5><p>可以。但是会降低传输的效率。</p><blockquote><p>四次握手是指：第二次握手：Server只发送ACK和acknowledge number；而Server的SYN和初始序列号在第三次握手时发送；原来协议中的第三次握手变为第四次握手。出于优化目的，四次握手中的二、三可以合并。</p></blockquote><h5 id="第三次握手中，如果客户端的-ACK-未送达服务器，会怎样？"><a href="#第三次握手中，如果客户端的-ACK-未送达服务器，会怎样？" class="headerlink" title="第三次握手中，如果客户端的 ACK 未送达服务器，会怎样？"></a>第三次握手中，如果客户端的 ACK 未送达服务器，会怎样？</h5><p>服务器端：<br>由于服务器端没有收到 ACK 确认，因此会重发之前的 SYN + ACK （默认重发五次，之后自动关闭连接进入 CLOSED 状态），客户端收到后会重新传 ACK 给服务器。</p><p>客户端，两种情况：</p><ol><li>在服务器进行超时重发的过程中，如果客户端向服务器发送数据，数据头部的 ACK 为 1，服务器接收到数据后会读取 ACK，进入ESTABLISHED 状态。</li><li>在服务器进入 CLOSED 状态之后，如果客户端向服务器发送数据，服务器会以 RST 包应答。</li></ol><h5 id="如果已经建立了连接，但客户端出现了故障怎么办？"><a href="#如果已经建立了连接，但客户端出现了故障怎么办？" class="headerlink" title="如果已经建立了连接，但客户端出现了故障怎么办？"></a>如果已经建立了连接，但客户端出现了故障怎么办？</h5><p>服务器每收到一次客户端的请求后都会重新复位一个计时器，时间通常设置为2小时，若2小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒发送一次。若一连发送10个探测报文段仍然没反应，服务器就认为客户端出现故障，接着关闭连接。</p><h5 id="初始序列号是什么？"><a href="#初始序列号是什么？" class="headerlink" title="初始序列号是什么？"></a>初始序列号是什么？</h5><p>TCP 连接的一方 A，随机选择一个 32 位的序列号（Sequence Number）作为发送数据的初始序列号（Initial Sequence Number，ISN），比如为1000，以该序列号为原点，对要传送的数据进行编号：1001、1002…三次握手时，把这个序列号传送给另一方 B，以便在传输数据时，B 可以确认什么样的数据编号是合法的；同时在进行数据传输时，A 还可以确认 B 收到的每一个字节，如果 A 收到了 B 的确认编号（acknowledge number）是 2001，就说明编号 1001 - 2000 的数据已经被 B 成功接受。</p><h3 id="什么是四次挥手？"><a href="#什么是四次挥手？" class="headerlink" title="什么是四次挥手？"></a>什么是四次挥手？</h3><p><img src="/%22D:%5CBlog%5Cthemes%5Cnext%5Csource%5Cimages%5C7468686c6f26333378737f75717b2a3278737f6f326d6d327f73713375717d7b79335d7b5d5d5f2a6931484a4c4f7e524f7777516c512f28585f492c5d4b4a6d6b6432766c797b.jpg%22"></p>]]></content>
      
      
      <categories>
          
          <category> 八股 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> TCP </tag>
            
            <tag> UDP </tag>
            
            <tag> HTTP </tag>
            
            <tag> HTTPS </tag>
            
            <tag> 网络协议 </tag>
            
            <tag> 流量控制 </tag>
            
            <tag> 拥塞控制 </tag>
            
            <tag> 数据传输 </tag>
            
            <tag> 路由协议 </tag>
            
            <tag> IP地址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lab2.System calls</title>
      <link href="/2024/08/01/lab2-System%20calls/"/>
      <url>/2024/08/01/lab2-System%20calls/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lab1.Utils</title>
      <link href="/2024/07/25/lab1-Utils/"/>
      <url>/2024/07/25/lab1-Utils/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>6.S081实验记录</title>
      <link href="/2024/07/25/6-S081%E5%AE%9E%E9%AA%8C%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/07/25/6-S081%E5%AE%9E%E9%AA%8C%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> lab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MIT 6.S081 </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
