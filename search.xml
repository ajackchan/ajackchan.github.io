<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>lab1-Utils</title>
      <link href="/2024/09/05/lab1-Utils/"/>
      <url>/2024/09/05/lab1-Utils/</url>
      
        <content type="html"><![CDATA[<h2 id="Lab-1：Unix-utilities"><a href="#Lab-1：Unix-utilities" class="headerlink" title="Lab 1：Unix utilities"></a>Lab 1：Unix utilities</h2><blockquote><p>课程地址：<a href="https://pdos.csail.mit.edu/6.828/2020/schedule.html">https://pdos.csail.mit.edu/6.828/2020/schedule.html</a><br>Lab 地址：<a href="https://pdos.csail.mit.edu/6.828/2020/labs/util.html">https://pdos.csail.mit.edu/6.828/2020/labs/util.html</a>  </p></blockquote><ul><li><a href="#sleep">sleep</a></li><li><a href="#pingpong">pingpong</a></li><li><a href="#primes">primes</a></li><li><a href="#find">find</a></li><li><a href="#xargs">xargs</a></li></ul><span id="more"></span>  <h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h3><img src="/2024/09/05/lab1-Utils/1.jpg" class>  <blockquote><p>编写一个 sleep 程序，让它在 xv6 系统中根据用户指定的时间暂停运行，时间单位为系统时钟的周期数。  </p></blockquote><p>代码实现如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;kernel/types.h&quot;  </span><br><span class="line">#include &quot;kernel/stat.h&quot;  </span><br><span class="line">#include &quot;user/user.h&quot;  </span><br><span class="line">      </span><br><span class="line">#ifndef STDERR  </span><br><span class="line">#define STDERR 2  </span><br><span class="line">#endif  </span><br><span class="line">      </span><br><span class="line">int main(int argc,char *argv[])  </span><br><span class="line">&#123;     </span><br><span class="line">    if(argc != 2)&#123;  </span><br><span class="line">        fprintf(STDERR,&quot;usage: sleep &lt;second&gt;\n&quot;);  </span><br><span class="line">        exit(1);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    //字符串转整数  </span><br><span class="line">    int time = atoi(argv[1]);  </span><br><span class="line">      </span><br><span class="line">    // 检查 atoi 返回值是否为0，且参数不是&quot;0&quot;  </span><br><span class="line">    if(time == 0 &amp;&amp; argv[1][0] != &#x27;0&#x27;)&#123;  </span><br><span class="line">        fprintf(STDERR,&quot;Invalid number: %s\n&quot;,argv[1]);  </span><br><span class="line">        exit(1);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    //调用 sleep 系统调用  </span><br><span class="line">    sleep(time);  </span><br><span class="line">    exit(0);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>    <br>1. 引入必要的头文件  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;kernel/types.h&quot;  </span><br><span class="line">#include &quot;kernel/stat.h&quot;  </span><br><span class="line">#include &quot;user/user.h&quot; </span><br></pre></td></tr></table></figure><p>这些头文件包含了基本的数据类型、状态定义和用户级系统调用的声明，如 <code>exit</code> 和 <code>sleep</code>。  </p><p>2. 定义 <code>STDERR</code> 宏  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#ifdef STDERR  </span><br><span class="line">#define STDERR 2  </span><br><span class="line">#endif </span><br></pre></td></tr></table></figure><p>这个部分定义了 <code>STDERR</code> 为值为 <code>2</code> 的宏。<code>2</code> 是标注错误输出的文件描述符。  </p><p>3. <code>main</code> 函数的定义  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc,char* argv[]) </span><br></pre></td></tr></table></figure><p><code>main</code> 函数接受两个参数：<br>- <code>argc</code>：命令行参数的数量。<br>- <code>argv</code>：一个字符串数组。包含命令行传入的参数。  </p><p>4. 参数数量检查  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (argc != 2) &#123;  </span><br><span class="line">    fprintf(STDERR, &quot;usage: sleep &lt;second&gt;\n&quot;);  </span><br><span class="line">    exit(1);  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>如果传递的参数数量不等于 2（即程序名称和一个时间参数），程序会向标准错误输出 usage: sleep <second> 提示用户正确的用法，然后使用 exit(1) 退出程序，表示程序异常结束。  </second></p><p>5. 将字符串转换为整数  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int time = atoi(argv[1]);  </span><br></pre></td></tr></table></figure><p>使用 <code>atoi</code> 函数将字符串参数转换为整数，<code>argv[1]</code> 是用户输入的时间值。  </p><p>6. 检查转换后的整数值是否有效 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (time == 0 &amp;&amp; argv[1][0] != &#x27;0&#x27;) &#123;  </span><br><span class="line">    fprintf(STDERR, &quot;Invalid number: %s\n&quot;, argv[1]);  </span><br><span class="line">    exit(1);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>检查转换后的时间值是否为 0。如果 time 等于 0 且输入的字符串不是 “0”，程序会认为用户输入了无效的数字，并输出错误信息，然后退出。  </p><h3 id="pingpong"><a href="#pingpong" class="headerlink" title="pingpong"></a>pingpong</h3><img src="/2024/09/05/lab1-Utils/2.jpg" class>  <blockquote><p>编写一个程序，通过一对管道在父进程和子进程之间传递一个字节数据，实现类似“乒乓”的效果。父进程发送一个字节给子进程，子进程收到后打印消息并将字节返回给父进程，父进程再打印接收到的消息，最后两个进程都退出。  </p></blockquote><p>使用 fork() 复制本进程创建子进程，创建两个管道，分别用于父子之间两个方向的数据传输。  </p><p>代码实现如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;kernel/types.h&quot;</span><br><span class="line">#include &quot;user/user.h&quot;</span><br><span class="line">  </span><br><span class="line">//REC、SND 分别代表管道的读取端和写入端</span><br><span class="line">enum PIPE_END &#123;REC = 0, SND = 1&#125;;</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[]) &#123;</span><br><span class="line">    if(argc != 1) &#123;</span><br><span class="line">        fprintf(2,&quot;usage: pingpong (no parameter)\n&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int p1[2]; // 父到子</span><br><span class="line">    int p2[2]; // 子到父</span><br><span class="line">    pipe(p1);</span><br><span class="line">    pipe(p2);</span><br><span class="line"></span><br><span class="line">    int pid = fork();</span><br><span class="line"></span><br><span class="line">    if(pid == 0) &#123; // 子进程</span><br><span class="line">        close(p1[SND]);</span><br><span class="line">        close(p2[REC]);</span><br><span class="line"></span><br><span class="line">        char buf;</span><br><span class="line">        </span><br><span class="line">        if(read(p1[REC], &amp;buf, 1) &gt; 0) &#123;</span><br><span class="line">            printf(&quot;%d: recevied ping\n&quot;, getpid());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        write(p2[SND], &quot;p&quot;, 1);</span><br><span class="line"></span><br><span class="line">        close(p1[REC]);</span><br><span class="line">        close(p2[SND]);</span><br><span class="line">        </span><br><span class="line">        exit(0);</span><br><span class="line">    &#125;</span><br><span class="line">    else if(pid &gt; 0) &#123; // 父进程</span><br><span class="line">        close(p1[REC]);</span><br><span class="line">        close(p2[SND]);</span><br><span class="line"></span><br><span class="line">        write(p1[SND], &quot;p&quot;, 1);</span><br><span class="line"></span><br><span class="line">        char buf;</span><br><span class="line">        if(read(p2[REC], &amp;buf, 1) &gt; 0) &#123;</span><br><span class="line">            printf(&quot;%d: received pong\n&quot;,getpid());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        close(p1[SND]);</span><br><span class="line">        close(p2[REC]);</span><br><span class="line">        wait(0);</span><br><span class="line">        exit(0);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        fprintf(2, &quot;failed to fork\n&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1. 定义枚举  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enum PIPE_END &#123;REC = 0, SND = 1&#125;;  </span><br></pre></td></tr></table></figure><p>枚举定义 REC 和 SND，分别代表管道的读取端（REC &#x3D; 0）和写入端（SND &#x3D; 1）  </p><p>2. 创建两个管道  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int p1[2]; // 父到子  </span><br><span class="line">int p2[2]; // 子到父  </span><br><span class="line">pipe(p1);  </span><br><span class="line">pipe(p2);  </span><br></pre></td></tr></table></figure><p>- <code>p1</code>和<code>p2</code>是两个管道。每个管道是一个长度为<code>2</code>的整数数组，<code>pipe(p)</code> 会分别为 <code>p[0]</code> 和 <code>p[1]</code> 赋值，表示读取端和写入端的文件描述符。<br>- <code>p1</code> 用于父进程向子进程发送消息。<br>- <code>p2</code> 用于子进程向父进程返回消息。  </p><p>3.创建子进程  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> int pid = fork();</span><br></pre></td></tr></table></figure><p>- <code>fork()</code> 系统调用用于创建一个子进程。<code>pid</code> 变量存储返回值:<br>    - <code>pid</code> &#x3D;&#x3D; 0，表示当前进程是子进程。<br>    - <code>pid</code> &gt; 0,表示当前进程是父进程，并且 <code>pid</code> 是子进程的 <code>PID</code>。<br>    - <code>pid</code> &lt; 0,表示 <code>fork()</code> 失败  </p><p>4. 子进程逻辑  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">if (pid == 0) &#123; // 子进程  </span><br><span class="line">    close(p1[SND]);  </span><br><span class="line">    close(p2[REC]);  </span><br><span class="line">      </span><br><span class="line">    char buf;  </span><br><span class="line">    if (read(p1[REC], &amp;buf, 1) &gt; 0) &#123;  </span><br><span class="line">        printf(&quot;%d: received ping\n&quot;, getpid());  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    write(p2[SND], &quot;P&quot;, 1);  </span><br><span class="line">    close(p1[REC]);  </span><br><span class="line">    close(p2[SND]);  </span><br><span class="line">    exit(0);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>- 关闭未使用的管道端口<br>    - 子进程不需要使用 <code>p1</code> 的写入端（<code>SND</code>）和 p2 的读取端（<code>REC</code>），所以关闭这些端口。<br>- 读取消息<br>    - 使用 read() 从 p1[REC] 读取一个字节（<code>buf</code>），这将阻塞子进程，直到有数据可读。<br>    - 如果读取成功，打印 <code>&lt;pid&gt;: received ping</code>，其中 <code>&lt;pid&gt;</code> 是子进程的进程 <code>ID</code>。<br>- 发送消息<br>    - 使用 <code>write()</code> 向 <code>p2[SND]</code> 写入一个字节 “<code>P</code>“，这表示子进程将消息发送回父进程。<br>- 关闭剩余的管道端口<br>    - 关闭 <code>p1[REC]</code> 和 <code>p2[SND]</code>，然后子进程正常退出。  </p><p>5. 父进程逻辑  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">else if (pid &gt; 0) &#123; // 父进程  </span><br><span class="line">    close(p1[REC]);  </span><br><span class="line">    close(p2[SND]);  </span><br><span class="line">      </span><br><span class="line">    write(p1[SND], &quot;P&quot;, 1);  </span><br><span class="line">      </span><br><span class="line">    char buf;  </span><br><span class="line">    if (read(p2[REC], &amp;buf, 1) &gt; 0) &#123;  </span><br><span class="line">        printf(&quot;%d: received pong\n&quot;, getpid());  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    close(p1[SND]);  </span><br><span class="line">    close(p2[REC]);  </span><br><span class="line">    wait(0);  </span><br><span class="line">    exit(0);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>- 关闭未使用的管道端口<br>    - 父进程不需要使用 <code>p1</code> 的读取端（<code>REC</code>）和 <code>p2</code> 的写入端（<code>SND</code>），所以关闭这些端口。<br>- 发送消息<br>    - 使用 <code>write()</code> 向 <code>p1[SND]</code> 写入一个字节 “<code>P</code>“，这将启动子进程的读取操作。<br>- 等待并读取子进程的响应<br>    - 使用 <code>read()</code> 从 <code>p2[REC]</code> 读取一个字节（<code>buf</code>），这将阻塞父进程，直到子进程写入数据。<br>    - 如果读取成功，打印 <code>&lt;pid&gt;: received pong</code>，其中 <code>&lt;pid&gt;</code> 是父进程的进程 <code>ID</code>。<br>- 关闭剩余的管道端口<br>    - 关闭 <code>p1[SND]</code> 和 <code>p2[REC]</code>，等待子进程结束（<code>wait(0)</code>），然后父进程正常退出。  </p><h3 id="primes"><a href="#primes" class="headerlink" title="primes"></a>primes</h3><img src="/2024/09/05/lab1-Utils/3.jpg" class><blockquote><p>实现一个经典的”埃拉托斯特尼筛法”（Sieve of Eratosthenes）的多进程版本，使用 <code>pipe</code> 和 <code>fork</code> 创建进程链，每个进程从前一个进程接收数字并筛选出素数，直到处理完从2到35之间的所有数字。</p></blockquote><p>代码实现如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;kernel/types.h&quot;</span><br><span class="line">#include &quot;kernel/stat.h&quot;</span><br><span class="line">#include &quot;user/user.h&quot;</span><br><span class="line"></span><br><span class="line">enum PIPE_END &#123;REC = 0,SND = 1&#125;;</span><br><span class="line"></span><br><span class="line">//执行素数筛选</span><br><span class="line">void sieve(int pleft[2]) &#123;</span><br><span class="line">    int p;</span><br><span class="line"></span><br><span class="line">    // 读取当前管道中的第一个数，即素数</span><br><span class="line">    if(read(pleft[REC], &amp;p, sizeof(p)) == 0 || p == -1) &#123;</span><br><span class="line">        // 如果读取失败或遇到哨兵值-1，则退出</span><br><span class="line">        close(pleft[REC]);</span><br><span class="line">        exit(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printf(&quot;prime %d\n&quot;, p);</span><br><span class="line"></span><br><span class="line">    int pright[2];</span><br><span class="line">    pipe(pright);   // 创建用于传递给下一个筛子的管道</span><br><span class="line"></span><br><span class="line">    if(fork() == 0) &#123;</span><br><span class="line">        // 子进程，处理下一个筛子阶段</span><br><span class="line">        close(pright[SND]);</span><br><span class="line">        close(pleft[REC]);</span><br><span class="line"></span><br><span class="line">        sieve(pright);  // 递归调用 sieve 处理下一个筛子阶段</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // 父进程，负责筛选和传递数据</span><br><span class="line">        close(pright[REC]);</span><br><span class="line"></span><br><span class="line">        int buf;</span><br><span class="line">        while(read(pleft[REC], &amp;buf, sizeof(buf)) &gt; 0 &amp;&amp; buf != -1) &#123;</span><br><span class="line">            if(buf % p != 0) &#123;</span><br><span class="line">                write(pright[SND], &amp;buf, sizeof(buf));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        close(pleft[REC]);</span><br><span class="line">        close(pright[SND]);</span><br><span class="line"></span><br><span class="line">        wait(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    exit(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[]) &#123;</span><br><span class="line">    int input_pipe[2];</span><br><span class="line">    pipe(input_pipe); // 创建主进程的输入管道</span><br><span class="line"></span><br><span class="line">    if(fork() == 0) &#123;</span><br><span class="line">        // 子进程，执行筛选</span><br><span class="line">        close(input_pipe[SND]);  // 关闭子进程不需要的写入端</span><br><span class="line">        sieve(input_pipe);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // 主进程，生成数列并传递给子进程</span><br><span class="line">        close(input_pipe[REC]);</span><br><span class="line"></span><br><span class="line">        for(int i = 2;i &lt;= 35;i++) &#123;</span><br><span class="line">            write(input_pipe[SND], &amp;i, sizeof(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int sentinel = -1;</span><br><span class="line">        write(input_pipe[SND], &amp;sentinel, sizeof(sentinel)); // 写入哨兵值表示结束</span><br><span class="line">        close(input_pipe[SND]);   // 关闭写入端</span><br><span class="line"></span><br><span class="line">        wait(0);  // 等待子进程完成</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>主函数 main</strong><br>负责初始化程序，创建并输入数列，然后启动第一个筛选阶段</p><ol><li>创建输入管道并启动子进程</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int input_pipe[2];</span><br><span class="line">pipe(input_pipe); // 创建主进程的输入管道</span><br><span class="line"></span><br><span class="line">if(fork() == 0) &#123;</span><br><span class="line">    // 子进程，执行筛选</span><br><span class="line">    close(input_pipe[SND]);  // 关闭子进程不需要的写入端</span><br><span class="line">    sieve(input_pipe);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>子进程</strong> 负责处理数列筛选，执行 <code>sieve</code> 函数。</li><li><strong>父进程</strong> 生成数列，并将其通过 <code>input_pipe</code> 传递给子进程。</li></ul><ol start="2"><li>生成数列并传递给子进程</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 2; i &lt;= 35; i++) &#123;</span><br><span class="line">    write(input_pipe[1], &amp;i, sizeof(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int sentinel = -1;</span><br><span class="line">write(input_pipe[1], &amp;sentinel, sizeof(sentinel));</span><br><span class="line">close(input_pipe[1]);</span><br><span class="line"></span><br><span class="line">wait(0);</span><br><span class="line">exit(0);</span><br></pre></td></tr></table></figure><ul><li>主进程生成 [2, 35] 之间的数字，并通过管道 <code>input_pipe</code> 传递给子进程。</li><li><code>sentinel</code> 哨兵值 <code>-1</code> 被传入管道，标识数列的结束。</li><li>关闭管道的写入端，等待子进程完成后退出程序。</li></ul><p><strong>sieve 函数</strong></p><p><code>pleft[2]</code> 是从前一个进程传入的管道，通过它，当前进程接收一系列数字，并筛掉可被某个素数整除的数字，然后将剩下的数字传给下一个进程。</p><ol><li>读取素数并输出</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (read(pleft[0], &amp;p, sizeof(p)) == 0 || p == -1) &#123;</span><br><span class="line">    close(pleft[0]);</span><br><span class="line">    exit(0);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;prime %d\n&quot;, p);</span><br></pre></td></tr></table></figure><ol start="2"><li>创建管道和子进程</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int pright[2];</span><br><span class="line">pipe(pright);</span><br><span class="line"></span><br><span class="line">if (fork() == 0) &#123;</span><br><span class="line">    close(pright[1]);</span><br><span class="line">    close(pleft[0]);</span><br><span class="line">    sieve(pright);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>pipe(pright)</code>：为下一层进程创建一个新的管道 <code>pright</code>。</li><li><code>fork()</code> 创建一个新的子进程：<ul><li><strong>子进程</strong>，处理下一个筛子阶段</li><li><strong>父进程</strong>，负责筛选和传递数据</li></ul></li></ul><ol start="3"><li>筛选并传递剩余数字</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int buf;</span><br><span class="line">while (read(pleft[0], &amp;buf, sizeof(buf)) &gt; 0 &amp;&amp; buf != -1) &#123;</span><br><span class="line">    if (buf % p != 0) &#123;</span><br><span class="line">        write(pright[1], &amp;buf, sizeof(buf));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>父进程不断从 <code>pleft</code> 读取数字，并筛选掉那些可以被当前素数 <code>p</code> 整除的数字。</li><li>将剩余的数字写入到 <code>pright</code> 管道，传递给下一个进程进行处理。</li></ul><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><img src="/2024/09/05/lab1-Utils/5.jpg" class><blockquote><p>编写一个简单的 UNIX <code>find</code> 程序版本，用于在目录树中查找具有特定名称的所有文件。</p></blockquote><p>该功能的基本原理与 <code>ls</code> 命令类似，实际上可以通过对 <code>ls.c</code> 代码进行修改来实现。</p><p>代码实现如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;kernel/types.h&quot;</span><br><span class="line">#include &quot;kernel/stat.h&quot;</span><br><span class="line">#include &quot;kernel/fs.h&quot;</span><br><span class="line">#include &quot;user/user.h&quot;</span><br><span class="line"></span><br><span class="line">void find(char* path, char* target) &#123;</span><br><span class="line">    char buf[512], *p;</span><br><span class="line">    int fd;</span><br><span class="line">    struct dirent de;</span><br><span class="line">    struct stat st;</span><br><span class="line"></span><br><span class="line">    // 打开路径</span><br><span class="line">    if((fd = open(path, 0)) &lt; 0) &#123;</span><br><span class="line">        fprintf(2, &quot;find: cannot open %s\n&quot;, path);</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取文件/目录的状态</span><br><span class="line">    if(fstat(fd, &amp;st) &lt; 0) &#123;</span><br><span class="line">        fprintf(2, &quot;find: cannot stat %s\n&quot;, path);</span><br><span class="line">        close(fd);</span><br><span class="line"></span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //判断文件类型</span><br><span class="line">    switch (st.type) &#123;</span><br><span class="line">    case T_FILE:</span><br><span class="line">        if(strcmp(path + strlen(path) - strlen(target), target) == 0) &#123;</span><br><span class="line">            printf(&quot;%s\n&quot;, path);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">    case T_DIR:</span><br><span class="line">        if(strlen(path) + 1 + DIRSIZ + 1 &gt; sizeof(buf)) &#123;</span><br><span class="line">            fprintf(2, &quot;find: path too long\n&quot;);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        strcpy(buf, path);</span><br><span class="line">        p = buf + strlen(buf);</span><br><span class="line">        *p++ = &#x27;/&#x27;;</span><br><span class="line"></span><br><span class="line">        while(read(fd, &amp;de, sizeof(de)) == sizeof(de)) &#123;</span><br><span class="line">            if(de.inum == 0) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            memmove(p, de.name, DIRSIZ);</span><br><span class="line">            p[DIRSIZ] = 0;</span><br><span class="line"></span><br><span class="line">            if(stat(buf, &amp;st) &lt; 0) &#123;</span><br><span class="line">                fprintf(2, &quot;find: cannot stat %s\n&quot;,buf);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //跳过 &#x27;.&#x27; 和 &#x27;..&#x27;</span><br><span class="line">            if(strcmp(de.name, &quot;.&quot;) != 0 &amp;&amp; strcmp(de.name, &quot;..&quot;) != 0) &#123;</span><br><span class="line">                find(buf,target);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[]) &#123;</span><br><span class="line">    if (argc != 3) &#123;</span><br><span class="line">        fprintf(2, &quot;Usage: find &lt;directory&gt; &lt;filename&gt;\n&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    find(argv[1], argv[2]);</span><br><span class="line"></span><br><span class="line">    exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>find(char* path, char* target)</code></li></ol><p>这是一个递归函数，接受两个参数：</p><ul><li><code>path</code>：需要搜索的目录路径。</li><li><code>target</code>：要查找的目标文件名。</li></ul><p>函数的作用是遍历目录下的所有文件和子目录，查找与 <code>target</code> 文件名匹配的文件。</p><ol start="2"><li>打开目录并检查文件状态</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if((fd = open(path, 0)) &lt; 0) &#123;</span><br><span class="line">    fprintf(2, &quot;find: cannot open %s\n&quot;, path);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(fstat(fd, &amp;st) &lt; 0) &#123;</span><br><span class="line">    fprintf(2, &quot;find: cannot stat %s\n&quot;, path);</span><br><span class="line">    close(fd);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>open(path, 0)</code>：以只读模式打开目录或文件，返回文件描述符 <code>fd</code>，如果无法打开，打印错误信息。</li><li><code>fstat(fd, &amp;st)</code>：获取文件或目录的元数据信息（存储在 <code>st</code> 结构体中），用于判断它是文件还是目录。</li></ul><ol start="3"><li>判断文件类型</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">switch (st.type) &#123;</span><br><span class="line">    case T_FILE:</span><br><span class="line">        if(strcmp(path + strlen(path) - strlen(target), target) == 0) &#123;</span><br><span class="line">            printf(&quot;%s\n&quot;, path);</span><br><span class="line">        &#125;</span><br><span class="line">        break;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><ul><li>如果 <code>st.type</code> 为 <code>T_FILE</code>（文件），判断当前文件的名称是否与 <code>target</code> 相同。如果相同，就打印文件的路径。</li><li><code>strcmp(path + strlen(path) - strlen(target), target) == 0)</code>：通过比较路径末尾的文件名和目标文件名来确定是否匹配。</li></ul><ol start="4"><li>如果是递归，继续递归</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">case T_DIR:</span><br><span class="line">    if(strlen(path) + 1 + DIRSIZ + 1 &gt; sizeof(buf)) &#123;</span><br><span class="line">        fprintf(2, &quot;find: path too long\n&quot;);</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    strcpy(buf, path);</span><br><span class="line">    p = buf + strlen(buf);</span><br><span class="line">    *p++ = &#x27;/&#x27;;</span><br><span class="line">    while(read(fd, &amp;de, sizeof(de)) == sizeof(de)) &#123;</span><br><span class="line">        if(de.inum == 0) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        memmove(p, de.name, DIRSIZ);</span><br><span class="line">        p[DIRSIZ] = 0;</span><br><span class="line">        if(stat(buf, &amp;st) &lt; 0) &#123;</span><br><span class="line">            fprintf(2, &quot;find: cannot stat %s\n&quot;, buf);</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        if(strcmp(de.name, &quot;.&quot;) != 0 &amp;&amp; strcmp(de.name, &quot;..&quot;) != 0) &#123;</span><br><span class="line">            find(buf, target);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    break;</span><br></pre></td></tr></table></figure><ul><li>如果当前文件是 <code>T_DIR</code>（目录），将其路径保存在 <code>buf</code> 中，并开始读取目录内容。</li><li><code>while(read(fd, &amp;de, sizeof(de)) == sizeof(de))</code>：逐个读取目录中的文件或子目录项。</li><li>如果 <code>de.inum == 0</code>，表示这个目录项为空，跳过。</li><li>使用 <code>memmove</code> 将目录项的名称移动到缓冲区 <code>buf</code>，构建完整的路径名。</li><li>跳过 <code>.</code> 和 <code>..</code> 这两个特殊目录（当前目录和父目录），然后递归调用 <code>find(buf, target)</code>，继续在子目录中查找。</li></ul><h3 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h3><img src="/2024/09/05/lab1-Utils/6.jpg" class><blockquote><p>编写一个简单版本的 <code>xargs</code> 程序，从标准输入读取行并为每行运行一个命令，将行内容作为命令的参数。</p></blockquote><p>代码实现如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;kernel/types.h&quot;</span><br><span class="line">#include &quot;kernel/stat.h&quot;</span><br><span class="line">#include &quot;kernel/fs.h&quot;</span><br><span class="line">#include &quot;kernel/param.h&quot;</span><br><span class="line">#include &quot;user/user.h&quot;</span><br><span class="line"></span><br><span class="line">#define BUF_SIZE 2048</span><br><span class="line">#define MAX_ARGS MAXARG</span><br><span class="line"></span><br><span class="line">// 带参数列表，执行某个程序</span><br><span class="line">void run(char* program, char** args) &#123;</span><br><span class="line">    if(fork() == 0) &#123;</span><br><span class="line">        exec(program, args);</span><br><span class="line">        fprintf(2, &quot;exec %s failed\n&quot;, program);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 处理读入的参数并执行</span><br><span class="line">void execute_command(char* program, char** argsbuf, char** pa) &#123;</span><br><span class="line">    *pa = 0;    // 参数列表末尾用 null 标识列表结束</span><br><span class="line">    run(program, argsbuf);  // 执行命令</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[]) &#123;</span><br><span class="line">    char buf[BUF_SIZE]; // 读入时使用的内存池</span><br><span class="line">    char *p = buf, *last_p = buf;   // 当前参数的结束、开始指针</span><br><span class="line">    char *argsbuf[MAX_ARGS];    //全部参数列表，包含 argv 传进来的参数和 stdin 读入的参数</span><br><span class="line">    char **args = argsbuf;  // 指向 argsbuf 中第一个从 stdin 读入的参数</span><br><span class="line"></span><br><span class="line">    // 将 argv 提供的参数加入到最终的列表中</span><br><span class="line">    for(int i = 1; i &lt; argc; i++) &#123;</span><br><span class="line">        if(args - argsbuf &gt;= MAX_ARGS - 1) &#123;</span><br><span class="line">            //fprintf(2, &quot;too many arguments\n&quot;);</span><br><span class="line">            exit(1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        *args++ = argv[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    char **pa = args;</span><br><span class="line">    int n;</span><br><span class="line"></span><br><span class="line">    while((n = read(0, p, 1)) &gt; 0) &#123;</span><br><span class="line">        if(*p == &#x27; &#x27; || *p == &#x27;\n&#x27;) &#123;</span><br><span class="line">            *p = &#x27;\0&#x27;;  // 将空格或换行替换为 &#x27;\0&#x27;，分割开各个参数</span><br><span class="line">            *pa++ = last_p;</span><br><span class="line"></span><br><span class="line">            if(pa - argsbuf &gt;= MAX_ARGS - 1) &#123;</span><br><span class="line">                fprintf(2, &quot;too many arguments\n&quot;);</span><br><span class="line">                exit(1);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            last_p = p + 1;</span><br><span class="line"></span><br><span class="line">            if(*p == &#x27;\n&#x27;) &#123;</span><br><span class="line">                execute_command(argv[1], argsbuf, pa);</span><br><span class="line">                pa = args;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p++;</span><br><span class="line">        if(p - buf &gt;= BUF_SIZE) &#123;</span><br><span class="line">            fprintf(2, &quot;input line too long\n&quot;);</span><br><span class="line">            exit(1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(n &lt; 0) &#123;</span><br><span class="line">        fprintf(2, &quot;read error\n&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(pa != args) &#123;    // 如果最后一行不是空行</span><br><span class="line">        *p = &#x27;\0&#x27;;</span><br><span class="line">        *pa++ = last_p;</span><br><span class="line">        execute_command(argv[1], argsbuf, pa);      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while(wait(0) != -1) &#123;&#125;;    // 循环等待所有子进程完成</span><br><span class="line">    exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>run</code> 函数 —— 执行程序</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void run(char* program, char** args) &#123;</span><br><span class="line">    if(fork() == 0) &#123;</span><br><span class="line">        exec(program, args);</span><br><span class="line">        fprintf(2, &quot;exec %s failed\n&quot;, program);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>:<ul><li><code>run</code> 函数用于执行一个指定的程序。程序路径通过 <code>program</code> 传递，参数通过 <code>args</code> 列表传递。</li></ul></li><li><strong>逻辑</strong>:<ul><li><code>fork()</code>: 创建一个子进程。在子进程中，<code>fork()</code> 返回 0。</li><li>如果 <code>fork()</code> 成功返回 0，子进程使用 <code>exec(program, args)</code> 替换当前进程映像为指定的程序。如果 <code>exec</code> 失败，程序会输出错误信息并调用 <code>exit(1)</code> 退出子进程。</li></ul></li><li><strong>总结</strong>:<ul><li>子进程调用 <code>exec</code> 来执行指定命令。如果执行失败，则输出错误信息，并退出子进程。</li></ul></li></ul><ol start="2"><li><code>execute_command</code> 函数 —— 构造参数列表并调用 <code>run</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void execute_command(char* program, char** argsbuf, char** pa) &#123;</span><br><span class="line">    *pa = 0;    // 参数列表末尾用 null 标识列表结束</span><br><span class="line">    run(program, argsbuf);  // 执行命令</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>:<ul><li>该函数负责构造命令的参数列表并调用 <code>run</code> 来执行指定的命令。</li></ul></li><li><strong>逻辑</strong>:<ul><li><code>*pa = 0</code>: 将当前参数列表的末尾置为 <code>NULL</code>，这在 <code>exec</code> 函数中用来标识参数列表的结束。</li><li>然后调用 <code>run(program, argsbuf)</code>，将程序名和参数传递给 <code>run</code> 执行。</li></ul></li></ul><ol start="3"><li>主函数 —— 读取标准输入并构建参数列表</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char* argv[]) &#123;</span><br><span class="line">    char buf[BUF_SIZE]; // 读入时使用的内存池</span><br><span class="line">    char *p = buf, *last_p = buf;   // 当前参数的结束、开始指针</span><br><span class="line">    char *argsbuf[MAX_ARGS];    // 全部参数列表，包含 argv 传进来的参数和 stdin 读入的参数</span><br><span class="line">    char **args = argsbuf;  // 指向 argsbuf 中第一个从 stdin 读入的参数</span><br></pre></td></tr></table></figure><p><strong>初始化</strong>:</p><ul><li><code>buf[BUF_SIZE]</code>: 定义一个缓冲区用于从标准输入中读取数据，大小为 <code>BUF_SIZE</code>（2048 字节）。</li><li><code>p</code> 和 <code>last_p</code>: <code>p</code> 用于遍历缓冲区，<code>last_p</code> 记录每个参数的起始位置。</li><li><code>argsbuf</code>: 定义了一个指针数组，用于存储命令的参数列表，包括命令行传入的参数和从标准输入中读取的参数。</li><li><code>args</code>: 初始化为 <code>argsbuf</code>，它用于指向下一个要存储参数的位置。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for(int i = 1; i &lt; argc; i++) &#123;</span><br><span class="line">    if(args - argsbuf &gt;= MAX_ARGS - 1) &#123;</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    *args++ = argv[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>命令行参数处理</strong>:</p><ul><li>通过遍历命令行参数，将每个参数（从 <code>argv[1]</code> 开始）添加到 <code>argsbuf</code> 中。</li><li>每存储一个参数，<code>args</code> 会指向下一个空位。</li><li>如果参数数量超过 <code>MAX_ARGS - 1</code>，程序会提前退出以避免数组溢出。</li></ul><ol start="4"><li>读取标准输入并执行命令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">char **pa = args;</span><br><span class="line">int n;</span><br><span class="line"></span><br><span class="line">while((n = read(0, p, 1)) &gt; 0) &#123;</span><br><span class="line">    if(*p == &#x27; &#x27; || *p == &#x27;\n&#x27;) &#123;</span><br><span class="line">        *p = &#x27;\0&#x27;;  // 将空格或换行替换为 &#x27;\0&#x27;，分割开各个参数</span><br><span class="line">        *pa++ = last_p;</span><br><span class="line"></span><br><span class="line">        if(pa - argsbuf &gt;= MAX_ARGS - 1) &#123;</span><br><span class="line">            exit(1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        last_p = p + 1;</span><br><span class="line"></span><br><span class="line">        if(*p == &#x27;\n&#x27;) &#123;</span><br><span class="line">            execute_command(argv[1], argsbuf, pa);</span><br><span class="line">            pa = args;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p++;</span><br><span class="line">    if(p - buf &gt;= BUF_SIZE) &#123;</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>读取输入</strong>:<ul><li><code>read(0, p, 1)</code>: 每次从标准输入读取一个字符。</li><li>当遇到空格 <code>&#39; &#39;</code> 或换行符 <code>&#39;\n&#39;</code> 时，将其替换为 <code>&#39;\0&#39;</code>，这样每个参数字符串以 <code>&#39;\0&#39;</code> 结束，便于处理。</li><li>每当检测到一个参数结束（空格或换行），将该参数的起始位置 <code>last_p</code> 存入 <code>argsbuf</code> 中。</li></ul></li><li><strong>换行符处理</strong>:<ul><li>遇到换行符 <code>&#39;\n&#39;</code> 表示该行输入结束，调用 <code>execute_command</code> 来执行命令，将收集到的参数列表传入执行。执行后将 <code>pa</code> 重置为指向第一个参数的位置 <code>args</code>，准备处理下一行输入。</li></ul></li></ul><ol start="5"><li>错误处理与最后的命令执行</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    if(n &lt; 0) &#123;</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(pa != args) &#123;    // 如果最后一行不是空行</span><br><span class="line">        *p = &#x27;\0&#x27;;</span><br><span class="line">        *pa++ = last_p;</span><br><span class="line">        execute_command(argv[1], argsbuf, pa);       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while(wait(0) != -1) &#123;&#125;;    // 循环等待所有子进程完成</span><br><span class="line">    exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>错误处理</strong>:<ul><li>如果 <code>read</code> 函数返回负值，表示读取发生错误，程序会退出。</li></ul></li><li><strong>最后的命令执行</strong>:<ul><li>如果最后一行没有换行符但包含输入，则执行 <code>execute_command</code> 来处理这最后的命令。</li></ul></li><li><strong>等待子进程</strong>:<ul><li><code>while(wait(0) != -1)</code>: 等待所有子进程结束。<code>wait</code> 返回 -1 表示没有更多的子进程需要等待。</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>6.824实验记录</title>
      <link href="/2024/08/18/6-824%E5%AE%9E%E9%AA%8C%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/08/18/6-824%E5%AE%9E%E9%AA%8C%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> lab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MIT 6.824 </tag>
            
            <tag> 分布式系统 </tag>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2024/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2024/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 八股 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2024/08/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/08/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<ul><li>进程和线程<ul><li><a href="#%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F">进程和线程有什么区别？</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E5%BC%8F%EF%BC%9F">进程间通信有哪些方式？</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98">进程同步问题</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E7%8A%B6%E6%80%81%EF%BC%9F">进程有哪几种状态？</a></li></ul></li></ul><span id="more"></span><hr><h3 id="进程和线程有什么区别？"><a href="#进程和线程有什么区别？" class="headerlink" title="进程和线程有什么区别？"></a>进程和线程有什么区别？</h3><ul><li>进程（Process）是系统进行资源分配和调度的基本单位，线程（Thread）是 CPU 调度和分配的基本单位；</li><li>线程依赖于进程而存在，一个进程至少有一个线程；</li><li>进程有自己的独立地址空间，线程共享所属进程的地址空间；</li><li>进程是拥有系统资源的一个独立单位，而线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源（如程序计数器，一组寄存器和栈），和其他线程共享本进程的相关资源如内存、I&#x2F;O、CPU 等；</li><li>在进程切换时，涉及到整个当前进程 CPU 环境的保存环境的设置以及新被调度运行的 CPU 环境的设置，而线程切换只需保存和设置少量的寄存器的内容，并不涉及存储器管理方面的操作，可见，进程切换的开销远大于线程切换的开销；</li><li>线程之间的通信更方便，同一进程下的线程共享全局变量等数据，而进程之间的通信需要以进程间通信（IPC）的方式进行；</li><li>多线程程序只要有一个线程崩溃，整个程序就崩溃了，但多进程程序中一个进程崩溃并不会对其它进程造成影响，因为进程有自己的独立地址空间，因此多进程更加健壮。</li></ul><h5 id="同一进程中的线程可以共享哪些数据？"><a href="#同一进程中的线程可以共享哪些数据？" class="headerlink" title="同一进程中的线程可以共享哪些数据？"></a>同一进程中的线程可以共享哪些数据？</h5><details><summary>展开</summary><ul><li>进程代码段</li><li>进程的共有数据（全局变量、静态变量…）</li><li>进程打开的文件描述符</li><li>进程的当前目录</li><li>信号处理器&#x2F;信号处理函数：对收到的信号的处理方式</li><li>进程的 ID 与进程组 ID</li></ul></details><h5 id="线程独占哪些资源？"><a href="#线程独占哪些资源？" class="headerlink" title="线程独占哪些资源？"></a>线程独占哪些资源？</h5><details><summary>展开</summary><ul><li>线程 ID</li><li>一组寄存器的值</li><li>线程自身的栈（堆是共享的）</li><li>错误返回码：线程可能会产生不同的错误返回码，一个线程的错误返回码不应该被其它线程修改；</li><li>信号掩码&#x2F;信号屏蔽字（Signal mask）：表示是否屏蔽&#x2F;阻塞相应的信号（SIGKILL，SIGSTOP 除外）</li></ul></details><h3 id="进程间通信有哪些方式？"><a href="#进程间通信有哪些方式？" class="headerlink" title="进程间通信有哪些方式？"></a>进程间通信有哪些方式？</h3><ol><li>管道(Pipe)</li></ol><details><summary>展开</summary><ul><li><strong>半双工通信</strong>：<ul><li>管道是半双工的，数据只能在一个方向上流动，即数据从一端写入，从另一端读出。</li><li>如果需要双向通信，则必须建立两个管道，分别用于两个方向的数据传输。</li></ul></li><li><strong>数据传输机制</strong>：<ul><li>一个进程将数据写入管道的写端，数据会被添加到管道缓冲区的末尾。</li><li>另一个进程从管道的读端读取数据，每次读取时，数据是从缓冲区的头部取出。</li><li>这意味着管道的读取时先进先出的，确保数据的顺序性。</li></ul></li><li><strong>使用场景</strong>：<ul><li>管道只能用于具有亲缘关系的进程之间进行通信，如父子进程或兄弟进程，它们共享相同的文件描述符表</li></ul></li></ul></details><ol start="2"><li>命名管道</li><li>消息队列</li><li>信号(Signal)</li><li>共享内存</li><li>信号量(Semaphore)：初始化操作、P 操作、V 操作；<ol><li>P 操作：信号量 - 1，检测是否小于 0，小于则进程进入阻塞状态；</li><li>V 操作：信号量 + 1，若小于等于 0，则从队列中唤醒一个等待的进程进入就绪态</li></ol></li><li>套接字(Socket)</li></ol><h3 id="进程同步问题"><a href="#进程同步问题" class="headerlink" title="进程同步问题"></a>进程同步问题</h3><blockquote><p>进程的同步是目的，而进程间通信是实现进程同步的手段</p></blockquote><h5 id="管程-Monitor"><a href="#管程-Monitor" class="headerlink" title="管程 Monitor"></a>管程 Monitor</h5><details><summary>展开</summary><p>管程将共享变量以及对这些共享变量的操作封装起来，形成一个具有一定接口的功能模块，这样只能通过管程提供的某个过程才能访问管程中的资源。进程只能互斥地使用管程，使用完之后必须释放管程并唤醒入口等待队列中的进程。</p><ol><li><strong>HOARE 管程</strong>：当一个进程试图进入管程时，在<strong>入口等待队列</strong>等待。若 P 进程唤醒了 Q 进程，则 Q 进程先执行，P 在<strong>紧急等待队列</strong>中等待。<ol><li><code>wait</code> 操作：执行 <code>wait</code> 操作的进程进入条件变量链末尾，唤醒紧急等待队列或者入口队列中的进程；</li><li><code>signal</code> 唤醒条件变量链中的进程，自己进入紧急等待队列，若条件变量链为空，则继续执行。</li></ol></li><li><strong>MESA</strong> 管道：将 <strong>HOARE</strong> 中的 <code>signal</code> 换成了 <code>notify</code> (或者 <code>broadcast</code> 通知所有满足条件的)，进行通知而不是立马交换管程的使用权，在适合的时候，条件队列首位的进程可以进入，进入之前必须用 <code>while</code> 检查条件是否合适。优点：没有额外的进程切换</li></ol></details><h3 id="生产者-消费者问题"><a href="#生产者-消费者问题" class="headerlink" title="生产者-消费者问题"></a>生产者-消费者问题</h3><details><summary>展开</summary><blockquote><p>问题描述：使用一个缓冲区来存放数据，只有缓冲区没有满，生产者才可以写入数据；只有缓冲区不为空，消费者才可以读出数据</p></blockquote><p>代码实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 伪代码描述 </span><br><span class="line">// 定义信号量 full记录缓冲区物品数量 empty代表缓冲区空位数量 mutex为互斥量</span><br><span class="line">semaphore full = 0, empty = n, mutex = 1;</span><br><span class="line"></span><br><span class="line">// 生产者进程</span><br><span class="line">void producer()&#123;</span><br><span class="line">do&#123;</span><br><span class="line">     P(empty);</span><br><span class="line">  P(mutex);</span><br><span class="line"></span><br><span class="line">     // 生产者进行生产</span><br><span class="line">   </span><br><span class="line">     V(mutex);</span><br><span class="line">     V(full);</span><br><span class="line"> &#125; while(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void consumer()&#123;</span><br><span class="line">do&#123;</span><br><span class="line">  P(full);</span><br><span class="line">  P(mutex);</span><br><span class="line"></span><br><span class="line">    // 消费者进行消费</span><br><span class="line"></span><br><span class="line">  V(mutex);</span><br><span class="line">  V(empty);</span><br><span class="line"> &#125; while(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h5 id="哲学家就餐问题"><a href="#哲学家就餐问题" class="headerlink" title="哲学家就餐问题"></a>哲学家就餐问题</h5><details><summary>展开</summary><blockquote><p>问题描述：有五位哲学家围绕着餐桌坐，每一位哲学家要么思考，要么吃饭。为了吃饭，哲学家必须拿起两双筷子（分别放于左右两端）。不幸的是，筷子的数量和哲学家相等，所以每只筷子必须由两位哲学家共享。</p></blockquote><p>代码实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#define N 5  // number of philosopher</span><br><span class="line">#define LEFT (i + N - 1)%N // number of i&#x27;s left neighbors</span><br><span class="line">#define RIGHT (i + 1)%N // number of i&#x27;s right neighbors</span><br><span class="line">#define THINKING 0</span><br><span class="line">#define HUNGRY 1</span><br><span class="line">#define EATING 2</span><br><span class="line">typedef int semaphore;</span><br><span class="line">int state[N]; // array to keep track of everyone&#x27;s state</span><br><span class="line">semaphore mutex = 1; // mutual exclusion of critical region</span><br><span class="line">semaphore s[N]; </span><br><span class="line"></span><br><span class="line">void philosopher(int i) &#123;</span><br><span class="line">while (TRUE) &#123;</span><br><span class="line">think();</span><br><span class="line">take_forks(i);</span><br><span class="line">eat();</span><br><span class="line">put_forks(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void take_forks(int i) &#123;</span><br><span class="line">down(&amp;mutex); // enter critical region</span><br><span class="line">state[i] = HUNGRY; // record that i is hungry</span><br><span class="line">test_forks(i); // try to acquire two forks</span><br><span class="line">up(&amp;mutex); // exit critical region</span><br><span class="line">down(&amp;s[i]); // block if forks are not acquired</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void put_forks(int i) &#123;</span><br><span class="line">down(&amp;mutex); // enter critical region</span><br><span class="line">state[i] = THINKING; // record that has finished eating</span><br><span class="line">test_forks(LEFT); // see if left neighbor can now eat</span><br><span class="line">test_forks(RIGHT); // see if right neighbor can now eat</span><br><span class="line">up(&amp;mutex); // exit critical region</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test_forks(int i) &#123;</span><br><span class="line">if (state[i] == HUNGRY &amp;&amp; state[LEFT] != EATING &amp;&amp; state[RIGHT] != EATING) &#123;</span><br><span class="line">state[i] = EATING;</span><br><span class="line">up(&amp;s[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h5 id="临界区的概念？"><a href="#临界区的概念？" class="headerlink" title="临界区的概念？"></a>临界区的概念？</h5><details><summary>展开</summary><p>各个进程中对临界资源（互斥资源&#x2F;共享变量，一次只能给一个进程使用）进行操作的程序片段</p></details><h5 id="同步与互斥的概念？"><a href="#同步与互斥的概念？" class="headerlink" title="同步与互斥的概念？"></a>同步与互斥的概念？</h5><details><summary>展开</summary><ul><li>同步：多个进程因为合作而使得进程的执行有一定的先后顺序。比如某个进程需要另一个进程提供的消息，获得消息之前进入阻塞态；</li><li>互斥：多个进程在同一时刻只有一个进程能进入临界区</li></ul></details><h5 id="并发、并行、异步的区别？"><a href="#并发、并行、异步的区别？" class="headerlink" title="并发、并行、异步的区别？"></a>并发、并行、异步的区别？</h5><details><summary>展开</summary><ul><li>并发：在一个时间段中同时有多个程序在运行，但其实任一时刻，只有一个程序在 CPU 上运行，宏观上的并发是通过不断地切换实现的。</li><li>多线程：并发运行的一段代码，是实现异步的手段。</li><li>并行（和串行相比）：在多 CPU 系统中，多个程序无论在宏观还是微观上都是同时执行的。</li><li>异步（和同步相比）：同步是顺序执行，异步是在等待某个资源的时候继续做自己的事。</li></ul></details><h3 id="进程有哪几种状态？"><a href="#进程有哪几种状态？" class="headerlink" title="进程有哪几种状态？"></a>进程有哪几种状态？</h3><img src="/2024/08/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.jpg" class><ul><li>就绪状态：进程已获得除处理以外的所需资源，等待分配处理机资源</li><li>运行状态：占用处理机资源运行，处于此状态的进程数小于等于 CPU 数</li><li>阻塞状态：进程等待某种条件，在条件满足之前无法执行。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 八股 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进程与线程 </tag>
            
            <tag> 同步与通信 </tag>
            
            <tag> 内存管理 </tag>
            
            <tag> 死锁 </tag>
            
            <tag> IO管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="#%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84">计算机网络体系结构</a></p></li><li><p>传输层：TCP和UDP</p><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%EF%BC%9F">什么是三次握手</a></li><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%EF%BC%9F">什么是四次挥手</a></li><li><a href="#TCP%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%EF%BC%9F">TCP如何实现流量控制</a></li><li><a href="#TCP%E7%9A%84%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84%EF%BC%9F">TCP的拥塞控制是怎么实现的</a></li><li><a href="#TCP%E5%A6%82%E4%BD%95%E6%9C%80%E5%A4%A7%E5%88%A9%E7%94%A8%E5%B8%A6%E5%AE%BD%EF%BC%9F">TCP如何最大利用带宽</a></li><li><a href="#TCP%E4%B8%8EUDP%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F">TCP与UDP的区别</a></li><li><a href="#TCP%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E4%BC%A0%E8%BE%93%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%EF%BC%9F">TCP如何保证传输的可靠性</a><span id="more"></span></li></ul></li><li><p>应用层：HTTP和HTTPS</p><ul><li><a href="#HTTP%E5%92%8CHTTPS%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F">HTTP和HTTPS有什么区别</a></li><li><a href="#GET%E4%B8%8EPOST%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F">GET与POST的区别</a></li><li><a href="#Session%E4%B8%8ECookie%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F">Session与Cookie的区别</a></li><li><a href="#HTTP%E8%AF%B7%E6%B1%82%E6%9C%89%E5%93%AA%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81%E7%A0%81%EF%BC%9F">HTTP请求有哪些常见状态码</a></li><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AFRIP%EF%BC%9F%E7%AE%97%E6%B3%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F">什么是RIP</a></li></ul></li><li><p>网络层协议</p><ul><li><a href="#IP%E5%9C%B0%E5%9D%80%E7%9A%84%E5%88%86%E7%B1%BB%EF%BC%9F">IP地址的分类</a></li><li><a href="#%E4%BB%80%E4%B9%88%E5%8F%AB%E5%88%92%E5%88%86%E5%AD%90%E7%BD%91%EF%BC%9F">什么叫划分子网</a></li><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AFARP%E5%8D%8F%E8%AE%AE%EF%BC%9F">什么是ARP协议</a></li><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AFNAT%EF%BC%9F">什么是NAT</a></li><li><a href="#HTTP%E5%90%84%E7%89%88%E6%9C%AC">HTTP各版本</a></li></ul></li></ul><hr><h3 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h3><img src="/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/10.jpg" class><ul><li>Physical，Data Link，Network，Transport，Application</li><li>应用层：常见协议：<ul><li>FTP（21端口）：文件传输协议</li><li>SSH（22端口）：远程登陆</li><li>TELNET（23端口）：远程登录</li><li>SMTP（25端口）：发送邮件</li><li>POP3（110端口）：接收邮件</li><li>HTTP（80端口）：超文本传输协议</li><li>DNS（53端口）：运行在 UDP 上，域名解析服务</li></ul></li><li>传输层：TCP&#x2F;UDP</li><li>网络层：IP、ARP、NAT、RIP…</li></ul><h5 id="路由器、交换机位于哪一层？"><a href="#路由器、交换机位于哪一层？" class="headerlink" title="路由器、交换机位于哪一层？"></a>路由器、交换机位于哪一层？</h5><details><summary>展开</summary><ul><li>路由器网络层，根据 IP 地址进行寻址；</li><li>交换机数据链路层，根据 MAC 地址进行寻址</li></ul></details><hr><h3 id="什么是三次握手？"><a href="#什么是三次握手？" class="headerlink" title="什么是三次握手？"></a>什么是三次握手？</h3><img src="/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.jpg" class><ul><li>第一次握手：<strong>客户端行为</strong> ：客户端将 SYN 置 1，随机产生一个初始序列号 seq 发送给服务器，进入 SYN_SENT 状态；</li><li>第二次握手：<strong>服务器行为</strong> ：服务器收到客户端的 SYN &#x3D; 1 后，知道客户端请求建立连接，将自己的 SYN 置 1，ACK 置 1，产生一个acknowledge number &#x3D; sequence number + 1，并随机产生一个自己的初始序列号，发送给客户端，进入 SYN_RCVD 状态；</li><li>第三次握手：<strong>客户端的确认</strong> ：客户端检查 acknowledge number 是否为序列号 + 1，ACK 是否为 1，检查正确后将自己的 ACK 置 1，产生一个acknowledge number &#x3D; 服务器发送的序列号 + 1，发送给服务器，进 ESTABLISHED 状态；<strong>服务器的确认</strong> ：服务器检查 acknowledge number 是否为序列号 + 1 和 ACK 是否为1后进入 ESTABLISHED 状态，完成三次握手，连接建立。</li></ul><h5 id="TCP建立连接可以两次握手吗？为什么"><a href="#TCP建立连接可以两次握手吗？为什么" class="headerlink" title="TCP建立连接可以两次握手吗？为什么?"></a>TCP建立连接可以两次握手吗？为什么?</h5><details><summary>展开</summary><p>不可以</p><ol><li><p>可能会出现<strong>已失效的请求报文又传送到服务器端</strong>。</p><blockquote><p>客户端发出的第一个请求报文并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达服务器端。本来这是一个早已失效的报文段，但服务器端收到此失效的连接请求报文段后，误以为是客户端再次发送的一个新的连接请求，于是就向客户端发出确认报文段，同意建立连接。<strong>假设不采用”三次握手“，那么只要服务器端发出确认，新的连接就建立了。</strong> 由于客户端没有发出建立连接的请求，因此不会理睬服务器端的确认，也不会向服务器发送数据，但服务器端却以为新的连接已建立，并一直等待客户端发来数据，导致浪费很多服务器资源。</p></blockquote></li><li><p>只进行两次握手，服务器无法确认客户端是否接收到第二次握手的报文。如果 SYN-ACK 报文在传输过程中丢失，而客户端又不会发送数据，服务器认为连接已建立并开始发送数据，从而导致数据丢失于服务器资源浪费。</p></li><li><p>还有就是两次握手会给 SYN flood 攻击提供机会。</p></li></ol></details><h5 id="可以采用四次握手吗？为什么？"><a href="#可以采用四次握手吗？为什么？" class="headerlink" title="可以采用四次握手吗？为什么？"></a>可以采用四次握手吗？为什么？</h5><details><summary>展开</summary><p>可以。但是会降低传输的效率。</p><blockquote><p>四次握手是指：第二次握手：Server只发送ACK和acknowledge number；而Server的SYN和初始序列号在第三次握手时发送；原来协议中的第三次握手变为第四次握手。出于优化目的，四次握手中的二、三可以合并。</p></blockquote></details><h5 id="第三次握手中，如果客户端的-ACK-未送达服务器，会怎样？"><a href="#第三次握手中，如果客户端的-ACK-未送达服务器，会怎样？" class="headerlink" title="第三次握手中，如果客户端的 ACK 未送达服务器，会怎样？"></a>第三次握手中，如果客户端的 ACK 未送达服务器，会怎样？</h5><details><summary>展开</summary><p>服务器端：<br>由于服务器端没有收到 ACK 确认，因此会重发之前的 SYN + ACK （默认重发五次，之后自动关闭连接进入 CLOSED 状态），客户端收到后会重新传 ACK 给服务器。</p><p>客户端，两种情况：</p><ol><li>在服务器进行超时重发的过程中，如果客户端向服务器发送数据，数据头部的 ACK 为 1，服务器接收到数据后会读取 ACK，进入ESTABLISHED 状态。</li><li>在服务器进入 CLOSED 状态之后，如果客户端向服务器发送数据，服务器会以 RST 包应答。</li></ol></details><h5 id="如果已经建立了连接，但客户端出现了故障怎么办？"><a href="#如果已经建立了连接，但客户端出现了故障怎么办？" class="headerlink" title="如果已经建立了连接，但客户端出现了故障怎么办？"></a>如果已经建立了连接，但客户端出现了故障怎么办？</h5><details><summary>展开</summary><p>服务器每收到一次客户端的请求后都会重新复位一个计时器，时间通常设置为2小时，若2小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒发送一次。若一连发送10个探测报文段仍然没反应，服务器就认为客户端出现故障，接着关闭连接。</p></details><h5 id="初始序列号是什么？"><a href="#初始序列号是什么？" class="headerlink" title="初始序列号是什么？"></a>初始序列号是什么？</h5><details><summary>展开</summary><p>TCP 连接的一方 A，随机选择一个 32 位的序列号（Sequence Number）作为发送数据的初始序列号（Initial Sequence Number，ISN），比如为1000，以该序列号为原点，对要传送的数据进行编号：1001、1002…三次握手时，把这个序列号传送给另一方 B，以便在传输数据时，B 可以确认什么样的数据编号是合法的；同时在进行数据传输时，A 还可以确认 B 收到的每一个字节，如果 A 收到了 B 的确认编号（acknowledge number）是 2001，就说明编号 1001 - 2000 的数据已经被 B 成功接受。</p></details><hr><h3 id="什么是四次挥手？"><a href="#什么是四次挥手？" class="headerlink" title="什么是四次挥手？"></a>什么是四次挥手？</h3><img src="/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2.jpg" class><ul><li>第一次挥手：Client 将 FIN 置 1，发送一个序列号 seq 给 Server，进入FIN_WAIT_1 状态；</li><li>第二次挥手：Server 收到 FIN 后，将 ACK 置 1，发送 acknowledge &#x3D; 收到的序列号 + 1 给 Client，进入 CLOSED_WAIT 状态。此时客户端已经没有要发送的数据了，但仍可以接受服务器发来的数据。</li><li>第三次挥手：Server 将 FIN 置 1，发送一个序列号给 Client，进入LAST_ACK 状态。</li><li>第四次挥手：Client 收到服务器的 FIN 后，将 ACK 置 1 ，发送 acknowledge number &#x3D; 收到的序列号 + 1 给 Server，进入 TIME_WAIT 状态；服务器收到后，确认 acknowledge number 后，进入 CLOSED 状态，不再向客户端发送数据。客户端等待2 * MSL（报文段最长寿命）后，也进入 CLOSED 状态。完成四次挥手。</li></ul><h5 id="为什么不能把服务器发送的-ACK-和-FIN-合起来，变成三次挥手（CLOSED-WAIT状态意义）？"><a href="#为什么不能把服务器发送的-ACK-和-FIN-合起来，变成三次挥手（CLOSED-WAIT状态意义）？" class="headerlink" title="为什么不能把服务器发送的 ACK 和 FIN 合起来，变成三次挥手（CLOSED_WAIT状态意义）？"></a>为什么不能把服务器发送的 ACK 和 FIN 合起来，变成三次挥手（CLOSED_WAIT状态意义）？</h5><details><summary>展开</summary><p>因为服务器收到客户端断开连接的请求时，可能还有一些数据没有发完，这时先回复 ACK，表示接受到了断开连接的请求。等到数据发送完之后再发 FIN，断开服务器到客户端的数据传送。</p></details><h5 id="如果第二次挥手时服务器的-ACK-没有送达客户端，会怎么样？"><a href="#如果第二次挥手时服务器的-ACK-没有送达客户端，会怎么样？" class="headerlink" title="如果第二次挥手时服务器的 ACK 没有送达客户端，会怎么样？"></a>如果第二次挥手时服务器的 ACK 没有送达客户端，会怎么样？</h5><details><summary>展开</summary><p>客户端没有收到 ACK 确认，会重新发送 FIN 请求。</p></details><h5 id="客户端-TIME-WAIT-状态的意义？"><a href="#客户端-TIME-WAIT-状态的意义？" class="headerlink" title="客户端 TIME_WAIT 状态的意义？"></a>客户端 TIME_WAIT 状态的意义？</h5><details><summary>展开</summary><p>第四次挥手时，客户端发送给服务器的 ACK 有可能丢失，TIME_WAIT 状态就是用来重发可能丢失的 ACK 报文。如果 Server 没有收到 ACK，就会重发 FIN，如果 Client 在 2 * MSL 的时间内收到了 FIN，就会重新发送 ACK 并再次等待 2 * MSL，防止 Server 没有收到 ACK 而不断重发 FIN。</p><blockquote><p>MSL（Maximum Segment Lifetime），指一个片段在网络中最大的存活时间，2 * MSL 就是一个发送和一个回复所需的最大时间。如果直到 2 * MSL，Client 都没有再次收到 FIN，那么 Client 推断 ACK 已经被成功接收，则结束 TCP 连接。</p></blockquote></details><hr><h3 id="TCP如何实现流量控制？"><a href="#TCP如何实现流量控制？" class="headerlink" title="TCP如何实现流量控制？"></a>TCP如何实现流量控制？</h3><img src="/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/3.jpg" class><p>使用<strong>滑动窗口</strong>协议实现流量控制。防止发送方发送速率太快，接收方缓存区不够导致溢出。<strong>接收方会维护一个接收窗口 receiver window（窗口大小单位是字节）</strong>，接收窗口的大小是根据自己的资源情况动态调整的，在返回 ACK 时将接收窗口大小放在 TCP 报文中的窗口字段告知发送方。发送窗口大小不能超过接收窗口的大小，只有当发送方发送并收到确认之后，才能将发送窗口右移。</p><p>发送窗口的上限为接收窗口和拥塞窗口中的较小值。<strong>接收窗口表明了接收方的接收能力，拥塞窗口表明了网络的传送能力。</strong></p><img src="/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/4.jpg" class><h5 id="什么是零窗口（接收窗口为0时会怎样）？"><a href="#什么是零窗口（接收窗口为0时会怎样）？" class="headerlink" title="什么是零窗口（接收窗口为0时会怎样）？"></a>什么是零窗口（接收窗口为0时会怎样）？</h5><details><summary>展开</summary><p>如果接收方没有能力接收数据，就会将接受窗口设置为 0，这时<strong>发送方必须暂停发送数据，但是会启动一个持续计时器（persistence timer），到期后发送一个大小为 1 字节的探测数据包，以查看接收窗口状态。</strong>如果接收方能够接受数据，就会在返回的报文中更新接收窗口大小，恢复数据传送。</p></details><h3 id="TCP的拥塞控制是怎么实现的？"><a href="#TCP的拥塞控制是怎么实现的？" class="headerlink" title="TCP的拥塞控制是怎么实现的？"></a>TCP的拥塞控制是怎么实现的？</h3><img src="/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/5.jpg" class><p>拥塞控制主要由四个算法组成：<strong>慢启动（Slow Start）、拥塞避免（Congestion voidance）、快重传（Fast Retransmit）、快恢复（Fast Recovery）</strong> 。</p><ol><li>慢启动：刚开始发送数据时，先把拥塞窗口（congestion window）设置为一个最大报文段 MSS 的数值，每收到一个新的确认报文之后，就把拥塞窗口加 1 个 MSS。这样每经过一个传输轮次（或者说是没经过一个往返时间 RTT），拥塞窗口的大小就会加倍。</li></ol><ol start="2"><li>拥塞避免：当拥塞窗口的大小达到慢开始门限（slow start threshold）时，开始执行拥塞避免算法，拥塞窗口大小不再指数增加，而是线性增加，即每经过一个传输轮次只增加 1 MMS。</li></ol><blockquote><p>无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断出现拥塞（其根据就是没有收到确认），就要吧慢开始门限 ssthresh 设置为出现拥塞时的发送方窗口值的一般（但不能小于 2）。然后把拥塞窗口 cwnd 重新设置为 1，执行慢开始算法。（<strong>这是不使用快重传的情况</strong>）</p></blockquote><ol start="3"><li>快重传：快重传要求接收方在收到一个失序的报文段后就立即发出<strong>重复确认</strong> （为了使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。</li></ol><img src="/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/7.jpg" class><ol start="4"><li>快恢复：<strong>当发送方连续收到三个重复确认时，就把慢开始门限减半，然后执行拥塞避免算法。</strong> <blockquote><p>不执行慢开始算法的原因：因为如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方认为现在网络可能没有出现拥塞。也有的快重传是把开始时的拥塞窗口 cwnd 值再增大一点，即等于 ssthresh + 3 * MSS。这样做的理由是：既然发送方收到三个重复的确认，就表明有三个分组已经离开了网络。这三个分组不再消耗网络的资源而是停留在接受方的缓存中。可见现在网络中减少了三个分组。因此可以适当把拥塞窗口扩大些。</p></blockquote></li></ol><h3 id="TCP如何最大利用带宽？"><a href="#TCP如何最大利用带宽？" class="headerlink" title="TCP如何最大利用带宽？"></a>TCP如何最大利用带宽？</h3><ol><li>拥塞控制：TCP 使用拥塞控制算法（如 TCP Reno，TCP Cubic 等）来调整数据的发送速度，根据网络状况动态调整拥塞窗口的大小。</li><li>滑动窗口机制：通过调整发送方和接收方之间的窗口大小，TCP 能够确保数据连续发送而不会超出接收方的处理能力。</li><li>快重传和快回复：在检测丢包时，TCP 能够快速重传丢失的包，并调整窗口大小以快速恢复正常传输速率。</li><li>选择性确认：这允许接收方只确认已成功接收的数据块，帮助发送方更有效地处理丢包问题，减少不必要的重传。</li></ol><h3 id="TCP与UDP的区别？"><a href="#TCP与UDP的区别？" class="headerlink" title="TCP与UDP的区别？"></a>TCP与UDP的区别？</h3><ol><li>连接性：TCP 是面向连接的，UDP是无连接的；</li></ol><details><summary>什么叫无连接？</summary><p>UDP 发送数据前不需要建立连接，直接发送。</p></details><ol start="2"><li>可靠性：TCP 是可靠的，UDP不可靠；</li></ol><details><summary>什么叫不可靠？</summary><p>UDP 接收方收到报文后，不需要给出任何确认。（可能丢包，不保证数据完整性）</p></details><ol start="3"><li>通信方式：TCP 只支持点对点通信，UDP 支持一对一、一对多、多对一、多对多；</li><li>数据处理方式：TCP 是面向字节流的，UDP 是面向报文的，发送完整数据包；</li></ol><details><summary>什么是面向字节流？</summary><p>面向字节流是指发送数据时以字节为单位，一个数据包可以拆分成若干组进行发送，而 UDP 一个报文只能一次发完。</p></details><ol start="5"><li>拥塞控制：TCP 有拥塞控制机制，UDP 没有。网络出现的拥塞不会使源主机的发送速率降低，适用于实时性要求高的应用，比如媒体通信，游戏；</li><li>开销：TCP 首部开销（20 字节）比UDP首部开销（8 字节）要大</li><li>连接状态：UDP 的主机不需要维持复杂的连接状态表</li></ol><h5 id="什么时候选-TCP，什么时候选-UDP？"><a href="#什么时候选-TCP，什么时候选-UDP？" class="headerlink" title="什么时候选 TCP，什么时候选 UDP？"></a>什么时候选 TCP，什么时候选 UDP？</h5><details><summary>展开</summary><p>UDP：对实时性要求比较高的情况，如游戏、媒体通信、实时视频流（直播），即使出现传输错误也可以容忍；<br>TCP：其他大部分情况下，HTTP 都是用 TCP，因为要求传输的内容可靠，不出现丢失。</p></details><h5 id="HTTP-可以使用-UDP-吗？"><a href="#HTTP-可以使用-UDP-吗？" class="headerlink" title="HTTP 可以使用 UDP 吗？"></a>HTTP 可以使用 UDP 吗？</h5><details><summary>展开</summary><p>HTTP 不可以使用 UDP，HTTP 需要基于可靠的传输协议，而 UDP 不可靠。</p><p>注：HTTP 3.0 使用 基于UDP 的 QUIC 协议</p></details><h5 id="面向连接和无连接的区别"><a href="#面向连接和无连接的区别" class="headerlink" title="面向连接和无连接的区别"></a>面向连接和无连接的区别</h5><details><summary>展开</summary><p>无连接的网络服务（数据包服务） – 面向连接的网络服务（虚电路服务）</p><ul><li>虚电路服务：首先建立连接，所有的数据包经过相同的路径，服务质量有较好的保证；</li><li>数据包服务：每个数据包含目的地址，数据路由相互独立（路径可能变化）；网络尽最大努力交付数据，但不保证不丢失、不保证先后顺序、不保证在时限内交付；网络发生拥塞时，可能会将一些分组丢弃。</li></ul><img src="/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/8.jpg" class></details><h3 id="TCP如何保证传输的可靠性"><a href="#TCP如何保证传输的可靠性" class="headerlink" title="TCP如何保证传输的可靠性"></a>TCP如何保证传输的可靠性</h3><ol><li>数据包校验</li><li>对失序数据包重新排序（TCP 报文具有序列号）</li><li>丢失重复数据</li><li>应答机制：接收方收到数据之后，会发送一个确认（通常延迟几分之一秒）</li><li>超时重发：发送方发出数据之后，启动一个定时器，超时未收到接收方的确认，则重新发送这个数据</li><li>流量控制：确保接收端能够接收发送方的数据而不会缓冲区溢出</li></ol><hr><h3 id="HTTP和HTTPS有什么区别？"><a href="#HTTP和HTTPS有什么区别？" class="headerlink" title="HTTP和HTTPS有什么区别？"></a>HTTP和HTTPS有什么区别？</h3><ol><li>端口不同：HTTP 使用的是 80 端口，HTTPS 使用 443 端口；</li><li>HTTP（超文本传输协议）信息是明文传输，HTTPS 运行在 SSL（Secure Socket Layer）之上，添加了加密和认证机制，更加安全；</li><li>HTTPS 由于加密解密会带来更大的 CPU 和内存开销；</li><li>HTTPS 通信需要证书，一般需要向证书办法机构（CA）购买</li></ol><h5 id="HTTPS的连接过程？"><a href="#HTTPS的连接过程？" class="headerlink" title="HTTPS的连接过程？"></a>HTTPS的连接过程？</h5><details><summary>展开</summary><img src="/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/9.jpg" class><ol><li><strong>加密规则交换</strong>：客户端向服务器发送支持的加密规则，包括对称加密、非对称加密和摘要算法。</li><li><strong>服务器响应</strong>：服务器从客户端提供的加密规则中选择一组合适的加密和HASH算法，并将自己的数字证书发送给客户端。证书包含网站地址、公钥以及证书颁发机构等信息。</li><li><strong>客户端验证</strong>：客户端检查服务器证书的有效性，包括证书是否过期，证书颁发机构（CA）是否可靠，以及证书上的域名是否与服务器实际域名匹配。</li><li><strong>密钥加密传输</strong>：验证通过后，客户端生成一个随机密钥，用服务器的公钥加密，然后将加密后的密钥发送给服务器。</li><li><strong>握手信息加密</strong>：客户端使用HASH算法对握手信息进行摘要计算，并使用生成的随机密钥对摘要进行加密，然后将加密后的摘要一起发送给服务器。</li><li><strong>服务器解密验证</strong>：服务器使用私钥解密接收到的随机密钥，再用该密钥解密摘要，并验证握手信息的一致性。</li><li><strong>握手结束</strong>：验证无误后，服务器使用对称密钥加密握手消息回发给浏览器。浏览器解密验证摘要后，握手过程结束。</li></ol><p>总结：在HTTPS握手过程中，非对称加密用于密钥交换，对称加密用于后续数据传输，HASH算法用于确保数据完整性。</p></details><h5 id="输入-www-baidu-com，怎么变成-https-www-baidu-comd-的，怎么确定用HTTP还是HTTPS？"><a href="#输入-www-baidu-com，怎么变成-https-www-baidu-comd-的，怎么确定用HTTP还是HTTPS？" class="headerlink" title="输入 www.baidu.com，怎么变成 https://www.baidu.comd 的，怎么确定用HTTP还是HTTPS？"></a>输入 <a href="http://www.baidu.com,怎么变成/">www.baidu.com，怎么变成</a> <a href="https://www.baidu.comd/">https://www.baidu.comd</a> 的，怎么确定用HTTP还是HTTPS？</h5><details><summary>展开</summary><p>一种是原始的 302 跳转，服务器把所有的 HTTP 流量跳转到 HTTPS。但这样有一个漏洞，就是中间人可能在第一次访问站点的时候就劫持。解决方法是引入 HSTS 机制，用户浏览器在访问站点的时候强制使用 HTTPS。</p></details><h5 id="HTTPS-连接的时候，怎么确定收到的包是服务器发来的（中间人攻击）？"><a href="#HTTPS-连接的时候，怎么确定收到的包是服务器发来的（中间人攻击）？" class="headerlink" title="HTTPS 连接的时候，怎么确定收到的包是服务器发来的（中间人攻击）？"></a>HTTPS 连接的时候，怎么确定收到的包是服务器发来的（中间人攻击）？</h5><details><summary>展开</summary><ol><li>验证域名、有效期等信息是否正确。证书上都有包含这些信息，比较容易完成验证；</li><li>判断证书来源是否合法。每份签发证书都可以根据验证链查找到对应的根证书，操作系统、浏览器会在本地存储权威机构的根证书，利用本地根证书可以对对应机构签发证书完成来源验证；</li><li>判断证书是否被篡改。需要与 CA 服务器进行校验；</li><li>判断证书是否已吊销。通过 CRL（Certificate Revocation List 证书注销列表）和 OCSP（Online Certificate Status Protocol 在线证书状态协议）实现，其中 OCSP 可用于第 3 步中以减少与 cA 服务器的交互，提高验证效率。</li></ol></details><h5 id="什么是对称加密、非对称加密？区别是什么？"><a href="#什么是对称加密、非对称加密？区别是什么？" class="headerlink" title="什么是对称加密、非对称加密？区别是什么？"></a>什么是对称加密、非对称加密？区别是什么？</h5><details><summary>展开</summary><ul><li>对称加密：加密和解密采用相同的密钥。如：DES、RC2、RC4</li><li>非对称加密：需要两个密钥——公钥和私钥。如果用公钥加密，需要用私钥才能解密。如：RSA</li><li>区别：对称加密速度更快，通常用于大量数据的加密；非对称加密安全性更高（不需要传送密钥）</li></ul></details><h5 id="数字签字、报文摘要的原理"><a href="#数字签字、报文摘要的原理" class="headerlink" title="数字签字、报文摘要的原理"></a>数字签字、报文摘要的原理</h5><details><summary>展开</summary><ul><li>发送者 A 用私钥进行签名，接收者 B 用公钥验证签名。因为除 A 外没有人有私钥，所以 B 相信签名是来自 A。A 不可抵赖，B 也不能伪造报文。</li><li>摘要算法：MD5、SHA</li></ul></details><h3 id="GET与POST的区别？"><a href="#GET与POST的区别？" class="headerlink" title="GET与POST的区别？"></a>GET与POST的区别？</h3><ol><li>GET 是幂等的，即读取同一个资源，总是得到相同的数据，POST 不是幂等的；</li><li>GET 一般用于从服务器获取资源，而 POST 有可能改变服务器上的资源；</li><li>请求形式上：GET 请求的数据附在 URL 之后，在 HTTP 请求头中；POST 请求的数据在请求体中；</li><li>安全性：GET 请求可被缓存、收藏、保留到历史记录，且其请求数据明文出现在 URL 中。POST 的参数不会被保存，安全性相对较高；</li><li>GET 只允许 ASCII 字符，POST 对数据类型没有要求，也允许二进制数据；</li><li>GET 的长度有限制（操作系统或浏览器），而 POST 数据大小无限制。</li></ol><h3 id="Session与Cookie的区别？"><a href="#Session与Cookie的区别？" class="headerlink" title="Session与Cookie的区别？"></a>Session与Cookie的区别？</h3><p>Session 是服务器端保持状态的方案，Cookie 是客户端保持状态的方案。</p><p>Cookie 保存在客户端本地，客户端请求服务器时会将 Cookie 一起提交；Session 保存在服务端，通过检索 Sessionid 查看状态。保存 Sessionid 的方式可以采用 Cookie，如果禁用了 Cookie，可以使用 URL 重写机制（把会话 ID 保存在 URL 中）。</p><h3 id="从输入网址到获得页面的过程-越详细越好-？"><a href="#从输入网址到获得页面的过程-越详细越好-？" class="headerlink" title="从输入网址到获得页面的过程(越详细越好)？"></a>从输入网址到获得页面的过程(越详细越好)？</h3><ol><li>浏览器查询 DNS，获取域名对应的 IP 地址：具体过程包括浏览器搜索自身的 DNS 缓存、搜索操作系统的 DNS 缓存、读取本地的 Host 文件和向本地 DNS 服务器进行查询，如果要查询的域名包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析（此解析具有权威性）；如果要查询的域名不由本地 DNS 服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个 IP 地址映射，完成域名解析（此解析不具有权威性）。如果本地域名服务器并未缓存该网址映射关系，那么将根据其设置发起递归查询或者迭代查询；</li><li>浏览器获得域名对应的 IP 地址后，向服务器请求建立链接，发起三次握手；</li><li>TCP&#x2F;IP 链接建立起来后，浏览器向服务器发送 HTTP 请求；</li><li>服务器接收到这个请求，并根据路径参数映射到特定的请求处理器进行处理，并将处理结果及相应的视图返回给浏览器；</li><li>浏览器解析并渲染视图，若遇到对 js 文件、css 文件及图片等静态资源的引用，则重复上述步骤并向服务器请求这些资源；</li><li>浏览器根据其请求到的资源、数据渲染页面，最终向用户呈现一个完整的页面。</li></ol><h3 id="HTTP请求有哪些常见状态码？"><a href="#HTTP请求有哪些常见状态码？" class="headerlink" title="HTTP请求有哪些常见状态码？"></a>HTTP请求有哪些常见状态码？</h3><ol><li>2xx 状态码：操作成功。200 OK</li><li>3xx 状态码：重定向。301永久重定向；302 暂时重定向</li><li>4xx 状态码：客户端错误。400 Bad Request；401 Unauthorized；403 Forbidden；404 Not Found</li><li>5xx 状态码：服务器错误。500 服务器内部错误；501 服务器不可用</li></ol><h3 id="什么是RIP？算法是什么？"><a href="#什么是RIP？算法是什么？" class="headerlink" title="什么是RIP？算法是什么？"></a>什么是RIP？算法是什么？</h3><p>RIP(Routing Information Protocol，距离矢量路由协议)。<br>每个路由器维护一张表，记录该路由器到其它网络的“跳数”，路由器到与其直接连接的网络的跳数是 1，每多进过一个路由器跳数就加 1；更新该表时和相邻路由器交换路由信息；路由器允许一个路径最多包含 15 个路由器，如果跳数为 16，则不可达。交付数据报时优先选取距离最短的路径。</p><p>（PS：RIP 是应用层协议）</p><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><details><summary>展开</summary><ul><li>实现简单，开销小；</li><li>随着网络规模扩大，开销也会增大；</li><li>最大距离为 15，限制了网络的规模；</li><li>当网络出现故障时，要经过较长时间才能将此信息传递到所有路由器</li></ul></details><hr><h3 id="IP地址的分类？"><a href="#IP地址的分类？" class="headerlink" title="IP地址的分类？"></a>IP地址的分类？</h3><img src="/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/11.jpg" class><p>路由器仅根据网络号 net-id 来转发分组，当分组到达目的网络的路由器之后，再根据主机号 host-id 将分组交付给主机；同一网络上的所有主机的网络号相同。</p><h3 id="什么叫划分子网？"><a href="#什么叫划分子网？" class="headerlink" title="什么叫划分子网？"></a>什么叫划分子网？</h3><p>当划分子网时，主机号 host-id 的一部分比特被借用来作为子网号 subnet-id。子网掩码是一个位掩码，其中网络号和子网号部分为 1，主机号部分为 0。数据报文传输时，首先根据网络号找到目标网络，数据包被发送到该网络的路由器。路由器再根据网络号和子网号确定具体的子网，然后将数据报发送到相应的子网中的主机。通过将子网掩码与目标地址逐位操作，若结果匹配某个子网的网络地址，数据包就会被发送到该子网。</p><h3 id="什么是ARP协议？"><a href="#什么是ARP协议？" class="headerlink" title="什么是ARP协议？"></a>什么是ARP协议？</h3><p>ARP 协议（Addres Resolution Protocol）将 IP 地址映射为 MAC 地址。以下是 ARP 的工作流程：</p><ol><li><strong>检查缓存</strong>：当源主机要发送数据包时，首先检查其 ARP 缓存是否已有目标主机的 MAC 地址。</li><li><strong>发送请求</strong>：如果没有找到，则广播 ARP 请求包，询问目标主机的 MAC 地址（同时发送自己的 IP 和 MAC 地址）</li><li><strong>接收响应</strong>：目标主机收到请求后，验证 IP 地址是否匹配。如果匹配，它会将源主机的映射添加到自己的 ARP 缓存，并返回包含其 MAC 地址的 ARP 响应包。</li><li><strong>更新缓存</strong>：源主机收到响应后，更新 ARP 缓存，保存目标主机的 IP 和 MAC地址映射，然后开始数据传输。</li><li><strong>跨网通信</strong>：如果目标主机不在同一局域网，源主机会使用 ARP 找到找到本局域网上的路由器 MAC 地址，将数据包发送给路由器，再由路由器转发到下一个网络。</li></ol><p>此过程确保 IP 地址可以正确映射为物理地址，从而在网络中传输数据。</p><h3 id="什么是NAT？"><a href="#什么是NAT？" class="headerlink" title="什么是NAT？"></a>什么是NAT？</h3><p>NAT（Network Address Translation，网络地址转换）用于让内网中的主机与互联网中的主机通信。NAT 路由器将内网主机的本地 IP 转换为全球 IP 地址。NAT 有两种主要类型：静态转换，即固定不变的全球 IP 地址；动态 NAT 转换，即根据需要分配的全球 IP 地址。</p><h3 id="HTTP各版本"><a href="#HTTP各版本" class="headerlink" title="HTTP各版本"></a>HTTP各版本</h3><img src="/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/12.jpg" class><ul><li>HTTP 0.9 版本<ul><li>HTTP 协议的第一个版本，功能简单，已弃用</li><li>仅支持纯文本数据的传输，虽然支持 HTML，单数不支持图片插入</li><li>仅支持 GET 请求方式，且不支持请求头</li><li>无状态，短连接。没有对用户状态的管理；每次请求建立一个 TCP 连接，响应之后关闭 TCP 连接。</li></ul></li><li>HTTP 1.0 版本<ul><li>支持 POST、GET、HEAD三种方法</li><li><strong>支持长连接 keep-alive</strong>（但<strong>默认还是使用短连接</strong>：浏览器每一次请求建立一次 TCP 连接，请求处理完毕之后断开）。</li><li>服务器不跟踪用户的行为也不记录用户过往请求。</li></ul></li><li>HTTP 1.1 版本<ul><li>新增 PUT、DELETE、CONNECT、TRACE、OPTIONS 方法，是现今使用最多的版本。</li><li>支持长连接，在一次 TCP 连接中可以发送多个请求或响应，且默认使用长连接。</li><li>支持宽带优化、断点续传。可以传输对象的部分数据，不必发送整个对象；文件上传下载支持续传。</li><li>因为长连接产生的问题：队头阻塞。长连接中，发送请求和响应都是串行化的，前面的消息会造成后面的消息也阻塞。解决方法是创建多个 TCP 连接，这样就可以基本保证可用性，浏览器默认的最大 TCP 连接数是 6 个。</li></ul></li><li>HTTP 2.0 版本<ul><li>二进制分帧，所有帧都是用二进制编码，节省了空间</li><li>多路复用：HTTP 2.0 中所有的连接都是持久化的。相比 1.1 版本可以不用维护更多的 TCP 连接，在处理并发请求的时候，可以将多个数据流中<strong>互不依赖的帧</strong>可以<strong>乱序发送</strong> ，同时还支持<strong>优先级</strong>。接收方接收之后可以根据帧头部信息将帧组合起来。（解决了 1.1 版本中的队头阻塞问题）</li><li>头部压缩：1.1 版本每次传输都需要传输一份首部，2.0 让双方各自缓存一份首部字段表，达到更快传输的目标。</li></ul></li><li>HTTP 3.0 版本<ul><li>基于 UDP 的 <strong>QUIC 多路复用</strong> ：在一个 QUIC 中可以并发发送多个 HTTP 请求 Stream，且如果各个 Stream 互不依赖，那么就不会造成 <strong>使用 TCP 带来的队头阻塞问题</strong> 。这个问题源头上是因为 TCP 连接，TCP 连接的性质决定了重传会影响队后的数据发送，所以干脆选用 UDP 来解决这个方案。</li><li>0 RRT 建链：RRT 表示 Round-Trip Time，3.0 可以实现 0 RRT 建链。一般来说 HTTPS 协议要建立完整链接包括 TCP 握手和 TLS 握手，总计需要至少 2 - 3 个 RRT，普通的 HTTP 协议也需要至少一个 RRT 才可以完成握手。基于 UDP 的 QUIC 协议可以在第一次发送包的时候直接发送业务数据。但是由于首次连接需要发送公钥数据，所以首次连接并不使用这一方法。</li></ul></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://blog.csdn.net/justloveyou_/article/details/78303617">https://blog.csdn.net/justloveyou_/article/details/78303617</a></li><li><a href="https://blog.csdn.net/qq_43103529/article/details/120813469">https://blog.csdn.net/qq_43103529/article/details/120813469</a></li><li><a href="https://blog.csdn.net/yjxsdzx/article/details/71937886">https://blog.csdn.net/yjxsdzx/article/details/71937886</a></li><li><a href="https://blog.csdn.net/bad_sheep/article/details/6158676">https://blog.csdn.net/bad_sheep/article/details/6158676</a></li><li><a href="https://github.com/wolverinn/Waking-Up/tree/9eae70203055c47cbd067bb88ba6db0bd5f44ad7">https://github.com/wolverinn/Waking-Up/tree/9eae70203055c47cbd067bb88ba6db0bd5f44ad7</a></li><li><a href="https://www.csview.cn/">https://www.csview.cn/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 八股 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> TCP </tag>
            
            <tag> UDP </tag>
            
            <tag> HTTP </tag>
            
            <tag> HTTPS </tag>
            
            <tag> 网络协议 </tag>
            
            <tag> 流量控制 </tag>
            
            <tag> 拥塞控制 </tag>
            
            <tag> 数据传输 </tag>
            
            <tag> 路由协议 </tag>
            
            <tag> IP地址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lab2.System calls</title>
      <link href="/2024/08/01/lab2-System-calls/"/>
      <url>/2024/08/01/lab2-System-calls/</url>
      
        <content type="html"><![CDATA[<h2 id="Lab-2：system-calls"><a href="#Lab-2：system-calls" class="headerlink" title="Lab 2：system calls"></a>Lab 2：system calls</h2><blockquote><p>课程地址：<a href="https://pdos.csail.mit.edu/6.828/2020/schedule.html">https://pdos.csail.mit.edu/6.828/2020/schedule.html</a><br>  Lab 地址：<a href="https://pdos.csail.mit.edu/6.828/2020/labs/syscall.html">https://pdos.csail.mit.edu/6.828/2020/labs/syscall.html</a></p></blockquote><ul><li><a href="#System-call-tracing">System-call-tracing</a></li><li><a href="#Sysinfo">Sysinfo</a></li></ul><span id="more"></span>  <h3 id="System-call-tracing"><a href="#System-call-tracing" class="headerlink" title="System-call-tracing"></a>System-call-tracing</h3><img src="/2024/08/01/lab2-System-calls/1.jpg" class><blockquote><p>实现一个新的系统调用 <code>trace</code>，用于跟踪指定的系统调用，并在每次调用后输出当前进程ID、系统调用的名称和返回值。</p></blockquote><h4 id="1-定义新的-trace-系统调用"><a href="#1-定义新的-trace-系统调用" class="headerlink" title="1. 定义新的 trace 系统调用"></a>1. <strong>定义新的 <code>trace</code> 系统调用</strong></h4><ul><li><p><strong>目标</strong>：实现一个新的 <code>trace</code> 系统调用，用于追踪进程中的系统调用。</p></li><li><p><strong>实现代码</strong>：</p><p>  在 <code>sysproc.c</code> 中实现系统调用 <code>sys_trace</code>，根据用户传递的 <code>mask</code> 设置当前进程的 <code>syscall_trace</code> 字段，用来表示要跟踪哪些系统调用。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">uint64 sys_trace(void) &#123;</span><br><span class="line">    int mask;</span><br><span class="line">    if (argint(0, &amp;mask) &lt; 0) return -1;</span><br><span class="line">    myproc()-&gt;syscall_trace = mask;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-系统调用的注册"><a href="#2-系统调用的注册" class="headerlink" title="2. 系统调用的注册"></a>2. <strong>系统调用的注册</strong></h4><ul><li><p>在 <code>syscall.h</code> 中为 <code>SYS_trace</code> 分配编号：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define SYS_trace 22</span><br></pre></td></tr></table></figure></li><li><p>在 <code>syscall.c</code> 中将 <code>sys_trace</code> 添加到系统调用表中：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// kernel/syscall.c   </span><br><span class="line">extern uint64 sys_chdir(void);</span><br><span class="line">extern uint64 sys_close(void);</span><br><span class="line">extern uint64 sys_dup(void);</span><br><span class="line">extern uint64 sys_exec(void);</span><br><span class="line">extern uint64 sys_exit(void);</span><br><span class="line">extern uint64 sys_fork(void);</span><br><span class="line">extern uint64 sys_fstat(void);</span><br><span class="line">extern uint64 sys_getpid(void);</span><br><span class="line">extern uint64 sys_kill(void);</span><br><span class="line">extern uint64 sys_link(void);</span><br><span class="line">extern uint64 sys_mkdir(void);</span><br><span class="line">extern uint64 sys_mknod(void);</span><br><span class="line">extern uint64 sys_open(void);</span><br><span class="line">extern uint64 sys_pipe(void);</span><br><span class="line">extern uint64 sys_read(void);</span><br><span class="line">extern uint64 sys_sbrk(void);</span><br><span class="line">extern uint64 sys_sleep(void);</span><br><span class="line">extern uint64 sys_unlink(void);</span><br><span class="line">extern uint64 sys_wait(void);</span><br><span class="line">extern uint64 sys_write(void);</span><br><span class="line">extern uint64 sys_uptime(void);</span><br><span class="line">extern uint64 sys_trace(void);   // HERE</span><br><span class="line"></span><br><span class="line">static uint64 (*syscalls[])(void) = &#123;</span><br><span class="line">[SYS_fork]    sys_fork,</span><br><span class="line">[SYS_exit]    sys_exit,</span><br><span class="line">[SYS_wait]    sys_wait,</span><br><span class="line">[SYS_pipe]    sys_pipe,</span><br><span class="line">[SYS_read]    sys_read,</span><br><span class="line">[SYS_kill]    sys_kill,</span><br><span class="line">[SYS_exec]    sys_exec,</span><br><span class="line">[SYS_fstat]   sys_fstat,</span><br><span class="line">[SYS_chdir]   sys_chdir,</span><br><span class="line">[SYS_dup]     sys_dup,</span><br><span class="line">[SYS_getpid]  sys_getpid,</span><br><span class="line">[SYS_sbrk]    sys_sbrk,</span><br><span class="line">[SYS_sleep]   sys_sleep,</span><br><span class="line">[SYS_uptime]  sys_uptime,</span><br><span class="line">[SYS_open]    sys_open,</span><br><span class="line">[SYS_write]   sys_write,</span><br><span class="line">[SYS_mknod]   sys_mknod,</span><br><span class="line">[SYS_unlink]  sys_unlink,</span><br><span class="line">[SYS_link]    sys_link,</span><br><span class="line">[SYS_mkdir]   sys_mkdir,</span><br><span class="line">[SYS_close]   sys_close,</span><br><span class="line">[SYS_trace]   sys_trace,  // AND HERE</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-用户态跳板函数生成"><a href="#3-用户态跳板函数生成" class="headerlink" title="3. 用户态跳板函数生成"></a>3. <strong>用户态跳板函数生成</strong></h4><ul><li><p>在 <code>usys.pl</code> 中添加 <code>trace</code>，生成用户态到内核态的跳板函数。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry(&quot;trace&quot;);</span><br></pre></td></tr></table></figure></li><li><p>在 <code>user.h</code> 中声明系统调用接口：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int trace(int mask);</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-修改进程结构"><a href="#4-修改进程结构" class="headerlink" title="4. 修改进程结构"></a>4. <strong>修改进程结构</strong></h4><ul><li><p>在 <code>proc.h</code> 中为 <code>proc</code> 结构添加 <code>syscall_trace</code> 字段，用来存储系统调用跟踪的 <code>mask</code>。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   // kernel/proc.h</span><br><span class="line">// Per-process state</span><br><span class="line"> struct proc &#123;</span><br><span class="line">    struct spinlock lock;</span><br><span class="line"></span><br><span class="line">    // p-&gt;lock must be held when using these:</span><br><span class="line">    enum procstate state;        // Process state</span><br><span class="line">    struct proc *parent;         // Parent process</span><br><span class="line">    void *chan;                  // If non-zero, sleeping on chan</span><br><span class="line">    int killed;                  // If non-zero, have been killed</span><br><span class="line">    int xstate;                  // Exit status to be returned to parent&#x27;s wait</span><br><span class="line">    int pid;                     // Process ID</span><br><span class="line"></span><br><span class="line">    // these are private to the process, so p-&gt;lock need not be held.</span><br><span class="line">    uint64 kstack;               // Virtual address of kernel stack</span><br><span class="line">    uint64 sz;                   // Size of process memory (bytes)</span><br><span class="line">    pagetable_t pagetable;       // User page table</span><br><span class="line">    struct trapframe *trapframe; // data page for trampoline.S</span><br><span class="line">    struct context context;      // swtch() here to run process</span><br><span class="line">    struct file *ofile[NOFILE];  // Open files</span><br><span class="line">    struct inode *cwd;           // Current directory</span><br><span class="line">    char name[16];               // Process name (debugging)</span><br><span class="line">    uint64 syscall_trace;        // Mask for syscall tracing (新添加的用于标识追踪哪些 system call 的 mask)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>proc.c</code> 中初始化 <code>syscall_trace</code>，确保每个新进程的 <code>syscall_trace</code> 初始值为 0。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;syscall_trace = 0;</span><br></pre></td></tr></table></figure></li><li><p>修改 <code>fork()</code> 函数，使子进程继承父进程的 <code>syscall_trace</code>。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np-&gt;syscall_trace = p-&gt;syscall_trace;</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-跟踪系统调用"><a href="#5-跟踪系统调用" class="headerlink" title="5. 跟踪系统调用"></a>5. <strong>跟踪系统调用</strong></h4><ul><li><p>在 <code>syscall()</code> 函数中检查进程是否需要追踪某个系统调用。如果设置了 <code>syscall_trace</code>，在系统调用执行后，打印出进程ID、系统调用名称和返回值。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   if ((p-&gt;syscall_trace &gt;&gt; num) &amp; 1) &#123;</span><br><span class="line">    printf(&quot;%d: syscall %s -&gt; %d\n&quot;, p-&gt;pid, syscall_names[num], p-&gt;trapframe-&gt;a0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加 <code>syscall_names[]</code> 数组，用于将系统调用编号映射到系统调用名称：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   const char *syscall_names[] = &#123;</span><br><span class="line">   [SYS_fork]    &quot;fork&quot;,</span><br><span class="line">   [SYS_exit]    &quot;exit&quot;,</span><br><span class="line">   [SYS_wait]    &quot;wait&quot;,</span><br><span class="line">   [SYS_pipe]    &quot;pipe&quot;,</span><br><span class="line">   [SYS_read]    &quot;read&quot;,</span><br><span class="line">   [SYS_kill]    &quot;kill&quot;,</span><br><span class="line">   [SYS_exec]    &quot;exec&quot;,</span><br><span class="line">   [SYS_fstat]   &quot;fstat&quot;,</span><br><span class="line">   [SYS_chdir]   &quot;chdir&quot;,</span><br><span class="line">   [SYS_dup]     &quot;dup&quot;,</span><br><span class="line">   [SYS_getpid]  &quot;getpid&quot;,</span><br><span class="line">   [SYS_sbrk]    &quot;sbrk&quot;,</span><br><span class="line">   [SYS_sleep]   &quot;sleep&quot;,</span><br><span class="line">   [SYS_uptime]  &quot;uptime&quot;,</span><br><span class="line">   [SYS_open]    &quot;open&quot;,</span><br><span class="line">   [SYS_write]   &quot;write&quot;,</span><br><span class="line">   [SYS_mknod]   &quot;mknod&quot;,</span><br><span class="line">   [SYS_unlink]  &quot;unlink&quot;,</span><br><span class="line">   [SYS_link]    &quot;link&quot;,</span><br><span class="line">   [SYS_mkdir]   &quot;mkdir&quot;,</span><br><span class="line">   [SYS_close]   &quot;close&quot;,</span><br><span class="line">   [SYS_trace]   &quot;trace&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-系统调用的完整流程"><a href="#6-系统调用的完整流程" class="headerlink" title="6. 系统调用的完整流程"></a>6. <strong>系统调用的完整流程</strong></h4><ul><li><p>用户程序调用 <code>trace()</code>，触发跳板函数，通过系统调用表找到内核中的 <code>sys_trace</code>，最终设置进程的 <code>syscall_trace</code>。</p></li><li><p>系统调用到达内核时，进入 <code>syscall()</code> 函数，根据 <code>syscall_trace</code> 字段决定是否打印系统调用的追踪信息。</p></li></ul><h4 id="7-小结"><a href="#7-小结" class="headerlink" title="7. 小结"></a>7. <strong>小结</strong></h4><ul><li>添加新的 <code>trace</code> 系统调用。</li><li>更新 <code>proc</code> 结构，使每个进程可以记录需要追踪的系统调用。</li><li>修改 <code>fork()</code> 函数，使得子进程继承父进程的追踪信息。</li><li>在 <code>syscall()</code> 函数中实现追踪逻辑，打印进程的系统调用信息。</li><li>使用 <code>syscall_names[]</code> 字符串数组，将系统调用编号与名称映射起来，便于打印。</li></ul><hr><h3 id="Sysinfo"><a href="#Sysinfo" class="headerlink" title="Sysinfo"></a>Sysinfo</h3><img src="/2024/08/01/lab2-System-calls/2.jpg" class><blockquote><p>实现一个新的系统调用 <code>sysinfo</code>，该调用会收集系统信息，包括空闲内存的字节数和非 <code>UNUSED</code> 状态的进程数。</p></blockquote><h4 id="1-在-kernel-syscall-h-中新增宏定义"><a href="#1-在-kernel-syscall-h-中新增宏定义" class="headerlink" title="1. 在 kernel/syscall.h 中新增宏定义"></a>1. <strong>在 <code>kernel/syscall.h</code> 中新增宏定义</strong></h4><ul><li><p>为 <code>sysinfo</code> 系统调用分配系统调用编号，添加以下宏定义：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define SYS_sysinfo 23</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-修改-user-usys-pl，新增-sysinfo-的-entry"><a href="#2-修改-user-usys-pl，新增-sysinfo-的-entry" class="headerlink" title="2. 修改 user/usys.pl，新增 sysinfo 的 entry"></a>2. <strong>修改 <code>user/usys.pl</code>，新增 <code>sysinfo</code> 的 entry</strong></h4><ul><li><p>在 <code>usys.pl</code> 文件中，新增一条 entry，用于生成 <code>sysinfo</code> 的用户态跳板函数：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry(&quot;sysinfo&quot;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-在-user-user-h-中新增-sysinfo-结构体及函数声明"><a href="#3-在-user-user-h-中新增-sysinfo-结构体及函数声明" class="headerlink" title="3. 在 user/user.h 中新增 sysinfo 结构体及函数声明"></a>3. <strong>在 <code>user/user.h</code> 中新增 <code>sysinfo</code> 结构体及函数声明</strong></h4><ul><li><p>定义 <code>sysinfo</code> 结构体，用于保存系统信息（例如空闲内存和进程数目）。</p></li><li><p>声明 <code>sysinfo</code> 系统调用的用户接口.</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">   struct stat;</span><br><span class="line">struct rtcdate;</span><br><span class="line">struct sysinfo;  // here!</span><br><span class="line"></span><br><span class="line">// system calls</span><br><span class="line">int fork(void);</span><br><span class="line">int exit(int) __attribute__((noreturn));</span><br><span class="line">int wait(int*);</span><br><span class="line">int pipe(int*);</span><br><span class="line">int write(int, const void*, int);</span><br><span class="line">int read(int, void*, int);</span><br><span class="line">int close(int);</span><br><span class="line">int kill(int);</span><br><span class="line">int exec(char*, char**);</span><br><span class="line">int open(const char*, int);</span><br><span class="line">int mknod(const char*, short, short);</span><br><span class="line">int unlink(const char*);</span><br><span class="line">int fstat(int fd, struct stat*);</span><br><span class="line">int link(const char*, const char*);</span><br><span class="line">int mkdir(const char*);</span><br><span class="line">int chdir(const char*);</span><br><span class="line">int dup(int);</span><br><span class="line">int getpid(void);</span><br><span class="line">char* sbrk(int);</span><br><span class="line">int sleep(int);</span><br><span class="line">int uptime(void);</span><br><span class="line">int trace(int);</span><br><span class="line">int sysinfo(struct sysinfo *);  // here!</span><br><span class="line"></span><br><span class="line">// ulib.c</span><br><span class="line">int stat(const char*, struct stat*);</span><br><span class="line">char* strcpy(char*, const char*);</span><br><span class="line">void *memmove(void*, const void*, int);</span><br><span class="line">char* strchr(const char*, char c);</span><br><span class="line">int strcmp(const char*, const char*);</span><br><span class="line">void fprintf(int, const char*, ...);</span><br><span class="line">void printf(const char*, ...);</span><br><span class="line">char* gets(char*, int max);</span><br><span class="line">uint strlen(const char*);</span><br><span class="line">void* memset(void*, int, uint);</span><br><span class="line">void* malloc(uint);</span><br><span class="line">void free(void*);</span><br><span class="line">int atoi(const char*);</span><br><span class="line">int memcmp(const void *, const void *, uint);</span><br><span class="line">void *memcpy(void *, const void *, uint);</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-在-kernel-syscall-c-中新增-sys-sysinfo-函数定义"><a href="#4-在-kernel-syscall-c-中新增-sys-sysinfo-函数定义" class="headerlink" title="4. 在 kernel/syscall.c 中新增 sys_sysinfo 函数定义"></a>4. <strong>在 <code>kernel/syscall.c</code> 中新增 <code>sys_sysinfo</code> 函数定义</strong></h4><ul><li><p>在 <code>syscall.c</code> 文件中，声明 <code>sys_sysinfo</code> 系统调用：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extern uint64 sys_sysinfo(void);</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-在-kernel-syscall-c-中函数指针数组新增-sysinfo-名称"><a href="#5-在-kernel-syscall-c-中函数指针数组新增-sysinfo-名称" class="headerlink" title="5. 在 kernel/syscall.c 中函数指针数组新增 sysinfo 名称"></a>5. <strong>在 <code>kernel/syscall.c</code> 中函数指针数组新增 <code>sysinfo</code> 名称</strong></h4><ul><li><p>在 <code>syscalls[]</code> 函数指针数组中，新增 <code>sys_sysinfo</code> 的映射：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[SYS_sysinfo] sys_trace,</span><br></pre></td></tr></table></figure></li><li><p>在 <code>syscall_names[]</code> 数组中，为 <code>sysinfo</code> 添加名称：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const char *syscall_names[] = &#123;</span><br><span class="line">   ...</span><br><span class="line">   [SYS_sysinfo] &quot;sysinfo&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-在-kernel-kalloc-c-中新增-freemem-size-函数"><a href="#6-在-kernel-kalloc-c-中新增-freemem-size-函数" class="headerlink" title="6. 在 kernel/kalloc.c 中新增 freemem_size 函数"></a>6. <strong>在 <code>kernel/kalloc.c</code> 中新增 <code>freemem_size</code> 函数</strong></h4><ul><li><p>实现 <code>freemem_size</code> 函数，获取当前系统的空闲内存量：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int</span><br><span class="line">freemem_size(void) &#123;</span><br><span class="line">  struct run *r;</span><br><span class="line">  int num = 0;</span><br><span class="line"></span><br><span class="line">  for(r = kmem.freelist; r; r = r-&gt;next) &#123;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return num * PGSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="7-在-kernel-proc-c-中新增-proc-num-函数"><a href="#7-在-kernel-proc-c-中新增-proc-num-函数" class="headerlink" title="7. 在 kernel/proc.c 中新增 proc_num 函数"></a>7. <strong>在 <code>kernel/proc.c</code> 中新增 <code>proc_num</code> 函数</strong></h4><ul><li><p>实现 <code>proc_num</code> 函数，计算当前非 <code>UNUSED</code> 状态的进程数目：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int</span><br><span class="line">proc_num(void) &#123;</span><br><span class="line">  struct proc *p;</span><br><span class="line">  uint64 num = 0;</span><br><span class="line"></span><br><span class="line">  for(p = proc; p &lt; &amp;proc[NPROC]; p++) &#123;</span><br><span class="line">    if(p-&gt;state != UNUSED) &#123;</span><br><span class="line">      num++;</span><br><span class="line">    &#125;    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="8-在-kernel-defs-h-中新增函数声明"><a href="#8-在-kernel-defs-h-中新增函数声明" class="headerlink" title="8. 在 kernel/defs.h 中新增函数声明"></a>8. <strong>在 <code>kernel/defs.h</code> 中新增函数声明</strong></h4><ul><li><p>在 <code>defs.h</code> 文件中声明新增的两个函数 <code>freemem_size</code> 和 <code>proc_num</code>：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// kalloc.c</span><br><span class="line">void*           kalloc(void);</span><br><span class="line">void            kfree(void *);</span><br><span class="line">void            kinit(void);</span><br><span class="line">int             freemem_size(void);  // here!</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// proc.c</span><br><span class="line">int             cpuid(void);</span><br><span class="line">void            exit(int);</span><br><span class="line">int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);</span><br><span class="line">void            procdump(void);</span><br><span class="line">int             proc_num(void);  // here!</span><br></pre></td></tr></table></figure></li></ul><h4 id="9-在-kernel-sysproc-c-中新增-sysinfo-的实现"><a href="#9-在-kernel-sysproc-c-中新增-sysinfo-的实现" class="headerlink" title="9. 在 kernel/sysproc.c 中新增 sysinfo 的实现"></a>9. <strong>在 <code>kernel/sysproc.c</code> 中新增 <code>sysinfo</code> 的实现</strong></h4><ul><li><p>在 <code>sysproc.c</code> 文件中包含 <code>sysinfo.h</code> 头文件，并实现 <code>sysinfo</code> 系统调用：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define &quot;sysinfo.h&quot;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">uint64</span><br><span class="line">sys_sysinfo(void) &#123;</span><br><span class="line">  struct sysinfo info;</span><br><span class="line">  uint64 addr;</span><br><span class="line">  struct proc *p = myproc();</span><br><span class="line"></span><br><span class="line">  if(argaddr(0, &amp;addr) &lt; 0) &#123;</span><br><span class="line">    return -1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  info.freemem = freemem_size();</span><br><span class="line">  info.nproc = proc_num();</span><br><span class="line"></span><br><span class="line">  if(copyout(p-&gt;pagetable, addr, (char *)&amp;info, sizeof(info)) &lt; 0) &#123;</span><br><span class="line">    return -1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>6.S081实验记录</title>
      <link href="/2024/07/25/6-S081%E5%AE%9E%E9%AA%8C%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/07/25/6-S081%E5%AE%9E%E9%AA%8C%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="Lab-1：Unix-utilities"><a href="#Lab-1：Unix-utilities" class="headerlink" title="Lab 1：Unix utilities"></a>Lab 1：Unix utilities</h2><a href="/2024/09/05/lab1-Utils/" title="lab1-Utils">lab1-Utils</a><h2 id="Lab-2：System-calls"><a href="#Lab-2：System-calls" class="headerlink" title="Lab 2：System calls"></a>Lab 2：System calls</h2><a href="/2024/08/01/lab2-System-calls/" title="lab2.System calls">lab2-System calls</a>]]></content>
      
      
      <categories>
          
          <category> lab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MIT 6.S081 </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
