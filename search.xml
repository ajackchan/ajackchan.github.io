<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>6.824实验记录</title>
      <link href="/2024/08/18/6-824%E5%AE%9E%E9%AA%8C%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/08/18/6-824%E5%AE%9E%E9%AA%8C%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> lab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MIT 6.824 </tag>
            
            <tag> 分布式系统 </tag>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2024/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2024/08/18/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 八股 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2024/08/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/08/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 八股 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进程与线程 </tag>
            
            <tag> 同步与通信 </tag>
            
            <tag> 内存管理 </tag>
            
            <tag> 死锁 </tag>
            
            <tag> IO管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<ul><li><p>传输层：TCP和UDP</p><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%EF%BC%9F">什么是三次握手</a></li><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%EF%BC%9F">什么是四次挥手</a></li><li><a href="#TCP%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%EF%BC%9F">TCP如何实现流量控制</a></li><li><a href="#TCP%E7%9A%84%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84%EF%BC%9F">TCP的拥塞控制是怎么实现的</a></li><li><a href="#TCP%E5%A6%82%E4%BD%95%E6%9C%80%E5%A4%A7%E5%88%A9%E7%94%A8%E5%B8%A6%E5%AE%BD%EF%BC%9F">TCP如何最大利用带宽</a></li><li><a href="#TCP%E4%B8%8EUDP%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F">TCP与UDP的区别</a></li><li><a href="#TCP%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E4%BC%A0%E8%BE%93%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%EF%BC%9F">TCP如何保证传输的可靠性</a><span id="more"></span></li></ul></li><li><p>应用层：HTTP和HTTPS</p><ul><li><a href="#HTTP%E5%92%8CHTTPS%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F">HTTP和HTTPS有什么区别</a></li></ul></li></ul><hr><h3 id="什么是三次握手？"><a href="#什么是三次握手？" class="headerlink" title="什么是三次握手？"></a>什么是三次握手？</h3><img src="/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.jpg" class><ul><li>第一次握手：<strong>客户端行为</strong> ：客户端将 SYN 置 1，随机产生一个初始序列号 seq 发送给服务器，进入 SYN_SENT 状态；</li><li>第二次握手：<strong>服务器行为</strong> ：服务器收到客户端的 SYN &#x3D; 1 后，知道客户端请求建立连接，将自己的 SYN 置 1，ACK 置 1，产生一个acknowledge number &#x3D; sequence number + 1，并随机产生一个自己的初始序列号，发送给客户端，进入 SYN_RCVD 状态；</li><li>第三次握手：<strong>客户端的确认</strong> ：客户端检查 acknowledge number 是否为序列号 + 1，ACK 是否为 1，检查正确后将自己的 ACK 置 1，产生一个acknowledge number &#x3D; 服务器发送的序列号 + 1，发送给服务器，进 ESTABLISHED 状态；<strong>服务器的确认</strong> ：服务器检查 acknowledge number 是否为序列号 + 1 和 ACK 是否为1后进入 ESTABLISHED 状态，完成三次握手，连接建立。</li></ul><h5 id="TCP建立连接可以两次握手吗？为什么"><a href="#TCP建立连接可以两次握手吗？为什么" class="headerlink" title="TCP建立连接可以两次握手吗？为什么?"></a>TCP建立连接可以两次握手吗？为什么?</h5><details><summary>展开</summary><p>不可以</p><ol><li><p>可能会出现<strong>已失效的请求报文又传送到服务器端</strong>。</p><blockquote><p>客户端发出的第一个请求报文并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达服务器端。本来这是一个早已失效的报文段，但服务器端收到此失效的连接请求报文段后，误以为是客户端再次发送的一个新的连接请求，于是就向客户端发出确认报文段，同意建立连接。<strong>假设不采用”三次握手“，那么只要服务器端发出确认，新的连接就建立了。</strong> 由于客户端没有发出建立连接的请求，因此不会理睬服务器端的确认，也不会向服务器发送数据，但服务器端却以为新的连接已建立，并一直等待客户端发来数据，导致浪费很多服务器资源。</p></blockquote></li><li><p>只进行两次握手，服务器无法确认客户端是否接收到第二次握手的报文。如果 SYN-ACK 报文在传输过程中丢失，而客户端又不会发送数据，服务器认为连接已建立并开始发送数据，从而导致数据丢失于服务器资源浪费。</p></li><li><p>还有就是两次握手会给 SYN flood 攻击提供机会。</p></li></ol></details><h5 id="可以采用四次握手吗？为什么？"><a href="#可以采用四次握手吗？为什么？" class="headerlink" title="可以采用四次握手吗？为什么？"></a>可以采用四次握手吗？为什么？</h5><details><summary>展开</summary><p>可以。但是会降低传输的效率。</p><blockquote><p>四次握手是指：第二次握手：Server只发送ACK和acknowledge number；而Server的SYN和初始序列号在第三次握手时发送；原来协议中的第三次握手变为第四次握手。出于优化目的，四次握手中的二、三可以合并。</p></blockquote></details><h5 id="第三次握手中，如果客户端的-ACK-未送达服务器，会怎样？"><a href="#第三次握手中，如果客户端的-ACK-未送达服务器，会怎样？" class="headerlink" title="第三次握手中，如果客户端的 ACK 未送达服务器，会怎样？"></a>第三次握手中，如果客户端的 ACK 未送达服务器，会怎样？</h5><details><summary>展开</summary><p>服务器端：<br>由于服务器端没有收到 ACK 确认，因此会重发之前的 SYN + ACK （默认重发五次，之后自动关闭连接进入 CLOSED 状态），客户端收到后会重新传 ACK 给服务器。</p><p>客户端，两种情况：</p><ol><li>在服务器进行超时重发的过程中，如果客户端向服务器发送数据，数据头部的 ACK 为 1，服务器接收到数据后会读取 ACK，进入ESTABLISHED 状态。</li><li>在服务器进入 CLOSED 状态之后，如果客户端向服务器发送数据，服务器会以 RST 包应答。</li></ol></details><h5 id="如果已经建立了连接，但客户端出现了故障怎么办？"><a href="#如果已经建立了连接，但客户端出现了故障怎么办？" class="headerlink" title="如果已经建立了连接，但客户端出现了故障怎么办？"></a>如果已经建立了连接，但客户端出现了故障怎么办？</h5><details><summary>展开</summary><p>服务器每收到一次客户端的请求后都会重新复位一个计时器，时间通常设置为2小时，若2小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒发送一次。若一连发送10个探测报文段仍然没反应，服务器就认为客户端出现故障，接着关闭连接。</p></details><h5 id="初始序列号是什么？"><a href="#初始序列号是什么？" class="headerlink" title="初始序列号是什么？"></a>初始序列号是什么？</h5><details><summary>展开</summary><p>TCP 连接的一方 A，随机选择一个 32 位的序列号（Sequence Number）作为发送数据的初始序列号（Initial Sequence Number，ISN），比如为1000，以该序列号为原点，对要传送的数据进行编号：1001、1002…三次握手时，把这个序列号传送给另一方 B，以便在传输数据时，B 可以确认什么样的数据编号是合法的；同时在进行数据传输时，A 还可以确认 B 收到的每一个字节，如果 A 收到了 B 的确认编号（acknowledge number）是 2001，就说明编号 1001 - 2000 的数据已经被 B 成功接受。</p></details><hr><h3 id="什么是四次挥手？"><a href="#什么是四次挥手？" class="headerlink" title="什么是四次挥手？"></a>什么是四次挥手？</h3><img src="/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2.jpg" class><ul><li>第一次挥手：Client 将 FIN 置 1，发送一个序列号 seq 给 Server，进入FIN_WAIT_1 状态；</li><li>第二次挥手：Server 收到 FIN 后，将 ACK 置 1，发送 acknowledge &#x3D; 收到的序列号 + 1 给 Client，进入 CLOSED_WAIT 状态。此时客户端已经没有要发送的数据了，但仍可以接受服务器发来的数据。</li><li>第三次挥手：Server 将 FIN 置 1，发送一个序列号给 Client，进入LAST_ACK 状态。</li><li>第四次挥手：Client 收到服务器的 FIN 后，将 ACK 置 1 ，发送 acknowledge number &#x3D; 收到的序列号 + 1 给 Server，进入 TIME_WAIT 状态；服务器收到后，确认 acknowledge number 后，进入 CLOSED 状态，不再向客户端发送数据。客户端等待2 * MSL（报文段最长寿命）后，也进入 CLOSED 状态。完成四次挥手。</li></ul><h5 id="为什么不能把服务器发送的-ACK-和-FIN-合起来，变成三次挥手（CLOSED-WAIT状态意义）？"><a href="#为什么不能把服务器发送的-ACK-和-FIN-合起来，变成三次挥手（CLOSED-WAIT状态意义）？" class="headerlink" title="为什么不能把服务器发送的 ACK 和 FIN 合起来，变成三次挥手（CLOSED_WAIT状态意义）？"></a>为什么不能把服务器发送的 ACK 和 FIN 合起来，变成三次挥手（CLOSED_WAIT状态意义）？</h5><details><summary>展开</summary><p>因为服务器收到客户端断开连接的请求时，可能还有一些数据没有发完，这时先回复 ACK，表示接受到了断开连接的请求。等到数据发送完之后再发 FIN，断开服务器到客户端的数据传送。</p></details><h5 id="如果第二次挥手时服务器的-ACK-没有送达客户端，会怎么样？"><a href="#如果第二次挥手时服务器的-ACK-没有送达客户端，会怎么样？" class="headerlink" title="如果第二次挥手时服务器的 ACK 没有送达客户端，会怎么样？"></a>如果第二次挥手时服务器的 ACK 没有送达客户端，会怎么样？</h5><details><summary>展开</summary><p>客户端没有收到 ACK 确认，会重新发送 FIN 请求。</p></details><h5 id="客户端-TIME-WAIT-状态的意义？"><a href="#客户端-TIME-WAIT-状态的意义？" class="headerlink" title="客户端 TIME_WAIT 状态的意义？"></a>客户端 TIME_WAIT 状态的意义？</h5><details><summary>展开</summary><p>第四次挥手时，客户端发送给服务器的 ACK 有可能丢失，TIME_WAIT 状态就是用来重发可能丢失的 ACK 报文。如果 Server 没有收到 ACK，就会重发 FIN，如果 Client 在 2 * MSL 的时间内收到了 FIN，就会重新发送 ACK 并再次等待 2 * MSL，防止 Server 没有收到 ACK 而不断重发 FIN。</p><blockquote><p>MSL（Maximum Segment Lifetime），指一个片段在网络中最大的存活时间，2 * MSL 就是一个发送和一个回复所需的最大时间。如果直到 2 * MSL，Client 都没有再次收到 FIN，那么 Client 推断 ACK 已经被成功接收，则结束 TCP 连接。</p></blockquote></details><hr><h3 id="TCP如何实现流量控制？"><a href="#TCP如何实现流量控制？" class="headerlink" title="TCP如何实现流量控制？"></a>TCP如何实现流量控制？</h3><img src="/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/3.jpg" class><p>使用<strong>滑动窗口</strong>协议实现流量控制。防止发送方发送速率太快，接收方缓存区不够导致溢出。<strong>接收方会维护一个接收窗口 receiver window（窗口大小单位是字节）</strong>，接收窗口的大小是根据自己的资源情况动态调整的，在返回 ACK 时将接收窗口大小放在 TCP 报文中的窗口字段告知发送方。发送窗口大小不能超过接收窗口的大小，只有当发送方发送并收到确认之后，才能将发送窗口右移。</p><p>发送窗口的上限为接收窗口和拥塞窗口中的较小值。<strong>接收窗口表明了接收方的接收能力，拥塞窗口表明了网络的传送能力。</strong></p><img src="/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/4.jpg" class><h5 id="什么是零窗口（接收窗口为0时会怎样）？"><a href="#什么是零窗口（接收窗口为0时会怎样）？" class="headerlink" title="什么是零窗口（接收窗口为0时会怎样）？"></a>什么是零窗口（接收窗口为0时会怎样）？</h5><details><summary>展开</summary><p>如果接收方没有能力接收数据，就会将接受窗口设置为 0，这时<strong>发送方必须暂停发送数据，但是会启动一个持续计时器（persistence timer），到期后发送一个大小为 1 字节的探测数据包，以查看接收窗口状态。</strong>如果接收方能够接受数据，就会在返回的报文中更新接收窗口大小，恢复数据传送。</p></details><h3 id="TCP的拥塞控制是怎么实现的？"><a href="#TCP的拥塞控制是怎么实现的？" class="headerlink" title="TCP的拥塞控制是怎么实现的？"></a>TCP的拥塞控制是怎么实现的？</h3><img src="/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/5.jpg" class><p>拥塞控制主要由四个算法组成：<strong>慢启动（Slow Start）、拥塞避免（Congestion voidance）、快重传（Fast Retransmit）、快恢复（Fast Recovery）</strong> 。</p><ol><li>慢启动：刚开始发送数据时，先把拥塞窗口（congestion window）设置为一个最大报文段 MSS 的数值，每收到一个新的确认报文之后，就把拥塞窗口加 1 个 MSS。这样每经过一个传输轮次（或者说是没经过一个往返时间 RTT），拥塞窗口的大小就会加倍。</li></ol><ol start="2"><li>拥塞避免：当拥塞窗口的大小达到慢开始门限（slow start threshold）时，开始执行拥塞避免算法，拥塞窗口大小不再指数增加，而是线性增加，即每经过一个传输轮次只增加 1 MMS。</li></ol><blockquote><p>无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断出现拥塞（其根据就是没有收到确认），就要吧慢开始门限 ssthresh 设置为出现拥塞时的发送方窗口值的一般（但不能小于 2）。然后把拥塞窗口 cwnd 重新设置为 1，执行慢开始算法。（<strong>这是不使用快重传的情况</strong>）</p></blockquote><ol start="3"><li>快重传：快重传要求接收方在收到一个失序的报文段后就立即发出<strong>重复确认</strong> （为了使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。</li></ol><img src="/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/7.jpg" class><ol start="4"><li>快恢复：<strong>当发送方连续收到三个重复确认时，就把慢开始门限减半，然后执行拥塞避免算法。</strong> <blockquote><p>不执行慢开始算法的原因：因为如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方认为现在网络可能没有出现拥塞。也有的快重传是把开始时的拥塞窗口 cwnd 值再增大一点，即等于 ssthresh + 3 * MSS。这样做的理由是：既然发送方收到三个重复的确认，就表明有三个分组已经离开了网络。这三个分组不再消耗网络的资源而是停留在接受方的缓存中。可见现在网络中减少了三个分组。因此可以适当把拥塞窗口扩大些。</p></blockquote></li></ol><h3 id="TCP如何最大利用带宽？"><a href="#TCP如何最大利用带宽？" class="headerlink" title="TCP如何最大利用带宽？"></a>TCP如何最大利用带宽？</h3><ol><li>拥塞控制：TCP 使用拥塞控制算法（如 TCP Reno，TCP Cubic 等）来调整数据的发送速度，根据网络状况动态调整拥塞窗口的大小。</li><li>滑动窗口机制：通过调整发送方和接收方之间的窗口大小，TCP 能够确保数据连续发送而不会超出接收方的处理能力。</li><li>快重传和快回复：在检测丢包时，TCP 能够快速重传丢失的包，并调整窗口大小以快速恢复正常传输速率。</li><li>选择性确认：这允许接收方只确认已成功接收的数据块，帮助发送方更有效地处理丢包问题，减少不必要的重传。</li></ol><h3 id="TCP与UDP的区别？"><a href="#TCP与UDP的区别？" class="headerlink" title="TCP与UDP的区别？"></a>TCP与UDP的区别？</h3><ol><li>连接性：TCP 是面向连接的，UDP是无连接的；</li></ol><details><summary>什么叫无连接？</summary><p>UDP 发送数据前不需要建立连接，直接发送。</p></details><ol start="2"><li>可靠性：TCP 是可靠的，UDP不可靠；</li></ol><details><summary>什么叫不可靠？</summary><p>UDP 接收方收到报文后，不需要给出任何确认。（可能丢包，不保证数据完整性）</p></details><ol start="3"><li>通信方式：TCP 只支持点对点通信，UDP 支持一对一、一对多、多对一、多对多；</li><li>数据处理方式：TCP 是面向字节流的，UDP 是面向报文的，发送完整数据包；</li></ol><details><summary>什么是面向字节流？</summary><p>面向字节流是指发送数据时以字节为单位，一个数据包可以拆分成若干组进行发送，而 UDP 一个报文只能一次发完。</p></details><ol start="5"><li>拥塞控制：TCP 有拥塞控制机制，UDP 没有。网络出现的拥塞不会使源主机的发送速率降低，适用于实时性要求高的应用，比如媒体通信，游戏；</li><li>开销：TCP 首部开销（20 字节）比UDP首部开销（8 字节）要大</li><li>连接状态：UDP 的主机不需要维持复杂的连接状态表</li></ol><h5 id="什么时候选-TCP，什么时候选-UDP？"><a href="#什么时候选-TCP，什么时候选-UDP？" class="headerlink" title="什么时候选 TCP，什么时候选 UDP？"></a>什么时候选 TCP，什么时候选 UDP？</h5><details><summary>展开</summary><p>UDP：对实时性要求比较高的情况，如游戏、媒体通信、实时视频流（直播），即使出现传输错误也可以容忍；<br>TCP：其他大部分情况下，HTTP 都是用 TCP，因为要求传输的内容可靠，不出现丢失。</p></details><h5 id="HTTP-可以使用-UDP-吗？"><a href="#HTTP-可以使用-UDP-吗？" class="headerlink" title="HTTP 可以使用 UDP 吗？"></a>HTTP 可以使用 UDP 吗？</h5><details><summary>展开</summary><p>HTTP 不可以使用 UDP，HTTP 需要基于可靠的传输协议，而 UDP 不可靠。</p><p>注：HTTP 3.0 使用 基于UDP 的 QUIC 协议</p></details><h5 id="面向连接和无连接的区别"><a href="#面向连接和无连接的区别" class="headerlink" title="面向连接和无连接的区别"></a>面向连接和无连接的区别</h5><details><summary>展开</summary><p>无连接的网络服务（数据包服务） – 面向连接的网络服务（虚电路服务）</p><ul><li>虚电路服务：首先建立连接，所有的数据包经过相同的路径，服务质量有较好的保证；</li><li>数据包服务：每个数据包含目的地址，数据路由相互独立（路径可能变化）；网络尽最大努力交付数据，但不保证不丢失、不保证先后顺序、不保证在时限内交付；网络发生拥塞时，可能会将一些分组丢弃。</li></ul><img src="/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/8.jpg" class></details><h3 id="TCP如何保证传输的可靠性"><a href="#TCP如何保证传输的可靠性" class="headerlink" title="TCP如何保证传输的可靠性"></a>TCP如何保证传输的可靠性</h3><ol><li>数据包校验</li><li>对失序数据包重新排序（TCP 报文具有序列号）</li><li>丢失重复数据</li><li>应答机制：接收方收到数据之后，会发送一个确认（通常延迟几分之一秒）</li><li>超时重发：发送方发出数据之后，启动一个定时器，超时未收到接收方的确认，则重新发送这个数据</li><li>流量控制：确保接收端能够接收发送方的数据而不会缓冲区溢出</li></ol><hr><h3 id="HTTP和HTTPS有什么区别？"><a href="#HTTP和HTTPS有什么区别？" class="headerlink" title="HTTP和HTTPS有什么区别？"></a>HTTP和HTTPS有什么区别？</h3><ol><li>端口不同：HTTP 使用的是 80 端口，HTTPS 使用 443 端口；</li><li>HTTP（超文本传输协议）信息是明文传输，HTTPS 运行在 SSL（Secure Socket Layer）之上，添加了加密和认证机制，更加安全；</li><li>HTTPS 由于加密解密会带来更大的 CPU 和内存开销；</li><li>HTTPS 通信需要证书，一般需要向证书办法机构（CA）购买</li></ol><h5 id="HTTPS的连接过程？"><a href="#HTTPS的连接过程？" class="headerlink" title="HTTPS的连接过程？"></a>HTTPS的连接过程？</h5><details><summary>展开</summary><img src="/2024/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/9.jpg" class><ol><li><strong>加密规则交换</strong>：客户端向服务器发送支持的加密规则，包括对称加密、非对称加密和摘要算法。</li><li><strong>服务器响应</strong>：服务器从客户端提供的加密规则中选择一组合适的加密和HASH算法，并将自己的数字证书发送给客户端。证书包含网站地址、公钥以及证书颁发机构等信息。</li><li><strong>客户端验证</strong>：客户端检查服务器证书的有效性，包括证书是否过期，证书颁发机构（CA）是否可靠，以及证书上的域名是否与服务器实际域名匹配。</li><li><strong>密钥加密传输</strong>：验证通过后，客户端生成一个随机密钥，用服务器的公钥加密，然后将加密后的密钥发送给服务器。</li><li><strong>握手信息加密</strong>：客户端使用HASH算法对握手信息进行摘要计算，并使用生成的随机密钥对摘要进行加密，然后将加密后的摘要一起发送给服务器。</li><li><strong>服务器解密验证</strong>：服务器使用私钥解密接收到的随机密钥，再用该密钥解密摘要，并验证握手信息的一致性。</li><li><strong>握手结束</strong>：验证无误后，服务器使用对称密钥加密握手消息回发给浏览器。浏览器解密验证摘要后，握手过程结束。</li></ol><p>总结：在HTTPS握手过程中，非对称加密用于密钥交换，对称加密用于后续数据传输，HASH算法用于确保数据完整性。</p></details><h5 id="输入-www-baidu-com，怎么变成-https-www-baidu-comd-的，怎么确定用HTTP还是HTTPS？"><a href="#输入-www-baidu-com，怎么变成-https-www-baidu-comd-的，怎么确定用HTTP还是HTTPS？" class="headerlink" title="输入 www.baidu.com，怎么变成 https://www.baidu.comd 的，怎么确定用HTTP还是HTTPS？"></a>输入 <a href="http://www.baidu.com,怎么变成/">www.baidu.com，怎么变成</a> <a href="https://www.baidu.comd/">https://www.baidu.comd</a> 的，怎么确定用HTTP还是HTTPS？</h5><details><summary>展开</summary><p>一种是原始的 302 跳转，服务器把所有的 HTTP 流量跳转到 HTTPS。但这样有一个漏洞，就是中间人可能在第一次访问站点的时候就劫持。解决方法是引入 HSTS 机制，用户浏览器在访问站点的时候强制使用 HTTPS。</p></details><h5 id="HTTPS-连接的时候，怎么确定收到的包是服务器发来的（中间人攻击）？"><a href="#HTTPS-连接的时候，怎么确定收到的包是服务器发来的（中间人攻击）？" class="headerlink" title="HTTPS 连接的时候，怎么确定收到的包是服务器发来的（中间人攻击）？"></a>HTTPS 连接的时候，怎么确定收到的包是服务器发来的（中间人攻击）？</h5><datails><summary>展开</summary><ol><li>验证域名、有效期等信息是否正确。证书上都有包含这些信息，比较容易完成验证；</li><li>判断证书来源是否合法。每份签发证书都可以根据验证链查找到对应的根证书，操作系统、浏览器会在本地存储权威机构的根证书，利用本地根证书可以对对应机构签发证书完成来源验证；</li><li>判断证书是否被篡改。需要与 CA 服务器进行校验；</li><li>判断证书是否已吊销。通过 CRL（Certificate Revocation List 证书注销列表）和 OCSP（Online Certificate Status Protocol 在线证书状态协议）实现，其中 OCSP 可用于第 3 步中以减少与 cA 服务器的交互，提高验证效率。</li></ol></datails>]]></content>
      
      
      <categories>
          
          <category> 八股 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> TCP </tag>
            
            <tag> UDP </tag>
            
            <tag> HTTP </tag>
            
            <tag> HTTPS </tag>
            
            <tag> 网络协议 </tag>
            
            <tag> 流量控制 </tag>
            
            <tag> 拥塞控制 </tag>
            
            <tag> 数据传输 </tag>
            
            <tag> 路由协议 </tag>
            
            <tag> IP地址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lab2.System calls</title>
      <link href="/2024/08/01/lab2-System%20calls/"/>
      <url>/2024/08/01/lab2-System%20calls/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lab1.Utils</title>
      <link href="/2024/07/25/lab1-Utils/"/>
      <url>/2024/07/25/lab1-Utils/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>6.S081实验记录</title>
      <link href="/2024/07/25/6-S081%E5%AE%9E%E9%AA%8C%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/07/25/6-S081%E5%AE%9E%E9%AA%8C%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> lab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MIT 6.S081 </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
